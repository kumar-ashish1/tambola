{"version":3,"sources":["utils/utils.tsx","components/ConfigTable.tsx","components/Box.tsx","components/BoardLine.tsx","components/Notification.tsx","components/Waiting.tsx","components/Timer.tsx","components/Board.tsx","components/Line.tsx","components/House.tsx","components/Ticket.tsx","components/WinningButtons.tsx","components/GoneNumbers.tsx","components/NewNumber.tsx","components/PcTicket.tsx","components/ResultButtons.tsx","components/HostTicket.tsx","components/MultipleHostTickets.tsx","components/Prizes.tsx","components/Walkthrough.tsx","components/Player.tsx","components/Toast.tsx","components/Config.tsx","components/EnterName.tsx","components/App.tsx","index.tsx"],"names":["getRandom","min","max","Math","floor","random","getNumberOfElementsInSet","set","count","i","length","getRowCount","house","rowIndex","putElements","j","counter","columnIndicesWithTwoNums","push","lenColumnsWithTwoNums","randomColumnIndexInArray","actualRandomColumnIndex","indices","splice","randomIndex","generateTicket","numHouses","sets","col1","col2","col3","col4","col5","col6","col7","col8","col9","columns","set1","set2","set3","set4","set5","set6","col","randomNumIndex","randomNum","lastCol","pass","vacantSetFound","randomSet","sort","a","b","generate","fullTicket","houses","houseNo","rowNo","console","log","getEmptyFullTicket","finalTicket","row","k","value","check","doNotLeavePage","event","preventDefault","returnValue","ConfigTable","props","_jsxs","onSubmit","handleSubmit","children","className","_jsx","awards","map","item","idx","readOnly","type","name","placeholder","nameAward","onChange","handleChangeHost","numAward","onClick","handleRemoveSpecificRow","handleAddRow","Box","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","call","clickHandler","invertCheck","state","setState","undefined","changeTicketState","index","_createClass","key","prevProps","this","checkedCssClass","Component","BoardLine","_ref","boxes","numbers","number","getUserName","obj","calledWinUsername","user","username","Notification","reward","deleteNotification","notificationObj","ticketBoardContainer","document","getElementById","setAttribute","_this2","socket","on","callWinObj","rewardMe","setTimeout","resultsObj","_this3","notificationComp","result","callWinType","_Fragment","Reward","ref","config","elementCount","angle","spread","decay","lifetime","Waiting","_React$Component","message","playerType","React","Timer","interval","updateTimer","prevSeconds","seconds","endGame","hasGameEnded","setInterval","clearInterval","createNumbersLine","n","generateAllBoardNumbers","Board","handleNewNumber","newNumber","columnNumber","rowNum","allBoardNumbers","goneNumbers","boardNumbersArray","x","shuffle","createArray","shuffledBoardNumbers","showTimer","generateNewButton","querySelector","disabled","classList","add","timer","allLines","generateAllLines","emit","id","Line","callback","generateBoxComponents","boxIndex","House","lineIndex","houseIndex","houseNumbers","Ticket","ticket","WinningButtons","awardButtons","_loop","GoneNumbers","isShown","mainComp","button","window","getComputedStyle","getPropertyValue","style","display","innerHTML","NewNumber","generateRandomKey","newNumberObj","PcTicket","handleWinningCall","winningButtons","winCallBack","ResultButtons","resultCallback","win","bogey","checkLine","line","isExist","getCornerNumber","num","HostTicket","status","line1","line2","line3","firstRowFirstNum","firstRowLastNumber","reverse","lastRowFirstNum","lastRowLastNumber","checkCorners","playerTicket","userCalledForWin","removeTicketFromHost","MultipleHostTicket","hasWalkthroughShown","walkThroughSteps","target","content","disableBeacon","placement","disableOverlay","removeTicket","idWinCall","newState","ticketFromPlayers","Object","keys","constructor","remove","runWalkthrough","showWalkthrough","newTicketsState","ticketComponents","_i","_Object$entries","entries","_Object$entries$_i","_slicedToArray","Joyride","steps","run","continuous","disableOverlayClose","showProgress","showSkipButton","spotlightClicks","styles","options","zIndex","primaryColor","textColor","Prizes","remainingAwards","whoWonWhat","parseInt","winningButton","concat","anyAwardsLeft","currAwards","currWhoWonWhat","currNumAward","toString","zeroAwardsLeft","whoWonComp","tiedPlayers","hasOwnProperty","join","prizeComp","Walkthrough","diffTypeSteps","configHostSteps","PC","Host","game","tutorialType","Player","ticketFromPlayer","winningCallFromPlayer","removeEventListener","timesRun","mainComponent","gameOverP","gameEndedCssClass","Toast","animation","displayStyle","initiallyHidden","handleClose","Config","hideToastInitially","handlleHostConfigDone","isModalOpen","e","eTarget","_toConsumableArray","handleRemoveRow","slice","handleChangePC","readyClient","numOfUsers","isEveryOneReady","PcsStatus","ready","isToastOpen","userName","emp_code","readyHost","gameFinished","watchTutorialModal","hasGameAlreadyStarted","calledWinWithBogeyTicket","hostDisconnected","roomID","location","pathname","substr","lastIndexOf","URLSearchParams","search","get","axios","method","url","headers","data","then","catch","error","room","roomSize","playerTypeObj","newPcStatus","numTickets","calledWinUserEmpCode","disconnect","award","userHost","href","String","color","required","EnterName","handleChange","isEmpty","handleKeyPress","submitted","queryParams","uname","uemp_code","randomId","myStyles","visibility","submitButton","onKeyPress","spellCheck","autoFocus","App","io","upgrade","transports","src","alt","addEventListener","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.dc1a36f5.chunk.js","sourcesContent":["import { BoxState } from \"../components/Box\";\n\nfunction getRandom(min: number, max: number) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nfunction getNumberOfElementsInSet(set: Array<Array<number>>) {\n  let count = 0;\n  for (let i = 0; i < set.length; ++i) {\n    count = count + set[i].length;\n  }\n  return count;\n}\n\nfunction getRowCount(house: Array<Array<number>>, rowIndex: number) {\n  let count = 0;\n  for (let i = 0; i < house[rowIndex].length; ++i) {\n    if (house[rowIndex][i] !== 0) ++count;\n  }\n  return count;\n}\n\nfunction getEmptyFullTicket(): Array<Array<Array<number>>> {\n  let houses = [];\n  for (let houseNo = 0; houseNo < 6; ++houseNo) {\n    let house = [];\n    for (let rowNo = 0; rowNo < 3; ++rowNo) {\n      let row = [0, 0, 0, 0, 0, 0, 0, 0, 0];\n      house.push(row);\n    }\n    houses[houseNo] = house;\n  }\n  console.log(\"houses\", houses);\n  return houses;\n}\n\nfunction generate() {\n  let col1: Array<number> = [],\n    col2: Array<number> = [],\n    col3: Array<number> = [],\n    col4: Array<number> = [],\n    col5: Array<number> = [],\n    col6: Array<number> = [],\n    col7: Array<number> = [],\n    col8: Array<number> = [],\n    col9: Array<number> = [];\n\n  for (let i = 1; i <= 9; ++i) {\n    col1.push(i);\n  }\n  for (let i = 10; i <= 19; ++i) {\n    col2.push(i);\n  }\n  for (let i = 20; i <= 29; ++i) {\n    col3.push(i);\n  }\n  for (let i = 30; i <= 39; ++i) {\n    col4.push(i);\n  }\n  for (let i = 40; i <= 49; ++i) {\n    col5.push(i);\n  }\n  for (let i = 50; i <= 59; ++i) {\n    col6.push(i);\n  }\n  for (let i = 60; i <= 69; ++i) {\n    col7.push(i);\n  }\n  for (let i = 70; i <= 79; ++i) {\n    col8.push(i);\n  }\n  for (let i = 80; i <= 90; ++i) {\n    col9.push(i);\n  }\n\n  let columns: Array<Array<number>> = [\n    col1,\n    col2,\n    col3,\n    col4,\n    col5,\n    col6,\n    col7,\n    col8,\n    col9,\n  ];\n\n  let set1: Array<Array<number>> = [],\n    set2: Array<Array<number>> = [],\n    set3: Array<Array<number>> = [],\n    set4: Array<Array<number>> = [],\n    set5: Array<Array<number>> = [],\n    set6: Array<Array<number>> = [];\n\n  for (let i = 0; i < 9; ++i) {\n    set1.push([]);\n    set2.push([]);\n    set3.push([]);\n    set4.push([]);\n    set5.push([]);\n    set6.push([]);\n  }\n\n  let sets: Array<Array<Array<number>>> = [set1, set2, set3, set4, set5, set6];\n\n  //   add 6 numbers from each column to each of the sets\n  for (let i = 0; i < 9; ++i) {\n    let col = columns[i];\n    for (let j = 0; j < 6; ++j) {\n      let randomNumIndex = getRandom(0, col.length - 1);\n      let randomNum = col[randomNumIndex];\n      let set = sets[j][i];\n      set.push(randomNum);\n      col.splice(randomNumIndex, 1);\n    }\n  }\n\n  //   // Assign 1 element of last col to a random set\n  let lastCol = columns[columns.length - 1];\n  let randomNumIndex = getRandom(0, lastCol.length - 1);\n  let randomNum = lastCol[randomNumIndex];\n  let randomSetIndex = getRandom(0, sets.length - 1);\n  let randomSet = sets[randomSetIndex][8];\n  randomSet.push(randomNum);\n  lastCol.splice(randomNumIndex, 1);\n\n  //   // 3 Passes over the columns\n  for (let pass = 0; pass < 3; ++pass) {\n    for (let j = 0; j < 9; ++j) {\n      let col = columns[j];\n      if (col.length === 0) continue;\n      let randomNumIndex = getRandom(0, col.length - 1);\n      let randomNum = col[randomNumIndex];\n      let vacantSetFound = false;\n      while (vacantSetFound === false) {\n        let randomSetIndex = getRandom(0, sets.length - 1);\n        let randomSet = sets[randomSetIndex];\n        if (\n          getNumberOfElementsInSet(randomSet) === 15 ||\n          randomSet[j].length === 2\n        )\n          continue;\n\n        vacantSetFound = true;\n        randomSet[j].push(randomNum);\n        col.splice(randomNumIndex, 1);\n      }\n    }\n  }\n\n  //   // Last pass\n  for (let j = 0; j < 9; ++j) {\n    let col = columns[j];\n    if (col.length === 0) continue;\n    let randomNumIndex = getRandom(0, col.length - 1);\n    let randomNum = col[randomNumIndex];\n    let vacantSetFound = false;\n    while (vacantSetFound === false) {\n      let randomSetIndex = getRandom(0, sets.length - 1);\n      let randomSet = sets[randomSetIndex];\n      if (\n        getNumberOfElementsInSet(randomSet) === 15 ||\n        randomSet[j].length === 3\n      )\n        continue;\n\n      vacantSetFound = true;\n      randomSet[j].push(randomNum);\n      col.splice(randomNumIndex, 1);\n    }\n  }\n\n  for (let i = 0; i < 6; ++i) {\n    for (let j = 0; j < 9; ++j) {\n      sets[i][j].sort((a, b) => {\n        return a - b;\n      });\n    }\n  }\n\n  return sets;\n}\n\nfunction putElements(set: Array<Array<number>>, house: Array<Array<number>>) {\n  for (let i = 0; i < 9; ++i) {\n    // Put the row which have three numbers\n    if (set[i].length === 3)\n      for (let j = 0; j < 3; ++j) {\n        house[j][i] = set[i][j];\n      }\n  }\n\n  // // Now the cases where the column will have two numbers;\n  let counter = 0;\n  let columnIndicesWithTwoNums = [];\n  for (let i = 0; i < 9; ++i) {\n    if (set[i].length === 2) {\n      columnIndicesWithTwoNums.push(i);\n    }\n  }\n  let lenColumnsWithTwoNums = columnIndicesWithTwoNums.length;\n  for (let i = 0; i < lenColumnsWithTwoNums; ++i) {\n    let randomColumnIndexInArray = getRandom(\n      0,\n      columnIndicesWithTwoNums.length - 1\n    );\n    let actualRandomColumnIndex =\n      columnIndicesWithTwoNums[randomColumnIndexInArray];\n    let preComp = [\n      [0, 1],\n      [0, 2],\n      [1, 2],\n    ];\n    let indices = preComp[counter % 3];\n    house[indices[0]][actualRandomColumnIndex] =\n      set[actualRandomColumnIndex][0];\n    house[indices[1]][actualRandomColumnIndex] =\n      set[actualRandomColumnIndex][1];\n    columnIndicesWithTwoNums.splice(randomColumnIndexInArray, 1);\n    ++counter;\n  }\n\n  // Cases where column will have 1 number\n  for (let i = 0; i < 9; ++i) {\n    if (set[i].length === 1) {\n      let randomIndex = getRandom(0, 2);\n      while (\n        house[randomIndex][i] !== 0 ||\n        getRowCount(house, randomIndex) === 5\n      ) {\n        randomIndex = getRandom(0, 2);\n      }\n      // found the rowNo for this number\n      house[randomIndex][i] = set[i][0];\n    }\n  }\n  return house;\n}\n\nfunction generateTicket(numHouses: number) {\n  // Full ticket of numbers get generated i.e. 6 houses\n  let sets = generate();\n  let fullTicket = getEmptyFullTicket();\n  for (let i = 0; i < numHouses; ++i) {\n    putElements(sets[i], fullTicket[i]);\n  }\n  let finalTicket: Array<Array<Array<BoxState>>> = [];\n  for (let i = 0; i < numHouses; ++i) {\n    let house: Array<Array<BoxState>> = [];\n    for (let j = 0; j < 3; ++j) {\n      let row: Array<BoxState> = [];\n      for (let k = 0; k < 9; ++k) {\n        row[k] = { value: fullTicket[i][j][k], check: false };\n      }\n      house[j] = row;\n    }\n    finalTicket[i] = house;\n  }\n  return finalTicket;\n}\n\nlet doNotLeavePage = (event: any) => {\n  // Custom message is not working, considererd as security threat;\n  // Event listener gets removed when the game\n  event.preventDefault();\n  event.returnValue =\n    \"All the game state will be lost. Are you sure you want to leave?\";\n  return \"All the game state will be lost. Are you sure you want to leave?\";\n};\n\nexport { generateTicket, doNotLeavePage };\n","import React from \"react\";\nimport { Award } from \"./Config\";\nimport '../css/Config.css';\n\ninterface ConfigTableProps {\n  awards: Award[];\n\n  // form functions\n  handleChangeHost: (idx: number) => (e: any) => void;\n  handleAddRow: () => void;\n  handleRemoveRow: () => void;\n  handleRemoveSpecificRow: (idx: number) => () => void;\n  handleSubmit: (event: any) => void;\n}\n\nfunction ConfigTable(props: ConfigTableProps) {\n \n  return (\n    <form onSubmit={props.handleSubmit}>\n      <table className=\"config-table\">\n        <thead>\n          <tr>\n            <th className=\"award-name-heading\"> Award Name </th>\n            <th className=\"award-number-heading\"> How Many? </th>\n            <th />\n          </tr>\n        </thead>\n        <tbody>\n          {props.awards.map((item, idx) => (\n            <tr key={idx}>\n              <td className=\"award-name\">\n                <input\n                  readOnly\n                  type=\"text\"\n                  name=\"nameAward\"\n                  placeholder=\"Enter Award Name\"\n                  value={props.awards[idx].nameAward}\n                  onChange={props.handleChangeHost(idx)}\n                />\n              </td>\n              <td className=\"award-number\">\n                <input\n                  type=\"number\"\n                  name=\"numAward\"\n                  placeholder=\"Enter Number of Awards\"\n                  min=\"1\"\n                  max=\"1\"\n                  readOnly\n                  value={props.awards[idx].numAward}\n                  onChange={props.handleChangeHost(idx)}\n                />\n              </td>\n              <td className=\"cross-button\">\n                <button\n                  type=\"button\"\n                  onClick={props.handleRemoveSpecificRow(idx)}\n                >\n                  X\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n      <div className=\"buttons-container\">\n        <button className=\"add-row\" type=\"button\" onClick={props.handleAddRow}>\n          Add Award\n        </button>\n        <button className=\"start-game\" type=\"submit\">\n          Start Game\n        </button>\n      </div>\n    </form>\n  );\n}\n\nexport default ConfigTable;\n","import * as React from \"react\";\nimport { Component } from \"react\";\n\n// TODO: May be we can just remove the state in this component as whatever we need is in the props\n// This is the component which is used by both BoardLine and also Line (ticket Line)\n\ninterface BoxProps {\n  value: number;\n\n  // Optional because BoardLine does not pass this, but\n  // for generation of ticket it is passed;\n  index?: number;\n  check?: boolean;\n  changeTicketState?: (index: number, check: boolean) => void;\n}\n\nexport interface BoxState {\n  value: number;\n  check: boolean;\n}\n\nclass Box extends Component<BoxProps, BoxState> {\n  constructor(props: BoxProps) {\n    super(props);\n    this.state = {\n      value: this.props.value,\n      check: this.props.check === undefined ? false : this.props.check,\n    };\n  }\n  clickHandler = () => {\n    let invertCheck = this.state.check ? false : true;\n    this.setState({ check: invertCheck, value: this.state.value });\n\n    // Change house's state when clicked, only on ticket and not on board\n    if (\n      this.props.changeTicketState !== undefined &&\n      this.props.index !== undefined\n    ) {\n      this.props.changeTicketState(this.props.index, invertCheck);\n    }\n  };\n\n  // This is only for the newNumber generated in the board sends new props to the box\n  // to make it mark itself\n  componentDidUpdate(prevProps: BoxProps) {\n    if (prevProps.check !== this.props.check && this.props.check) {\n      this.setState({ check: this.props.check });\n    }\n  }\n\n  render() {\n    let checkedCssClass = this.state.check ? \"checked\" : \"unchecked\";\n    return (\n      <div className=\"box\" onClick={this.clickHandler}>\n        <div className={checkedCssClass}></div>\n        <div className={checkedCssClass}></div>\n        <p>{this.props.value === 0 ? \"\" : this.props.value}</p>\n      </div>\n    );\n  }\n}\n\nexport default Box;\n","import * as React from \"react\";\nimport { FunctionComponent } from \"react\";\nimport Box, { BoxState } from \"./Box\";\n\ninterface BoardLineProps {\n  index: number;\n  numbers: Array<BoxState>;\n}\n\nexport let BoardLine: FunctionComponent<BoardLineProps> = ({\n  numbers,\n}: BoardLineProps) => {\n  let boxes = numbers.map(function (number) {\n    return <Box value={number.value} check={number.check} />;\n  });\n  return <div className=\"board-line\">{boxes}</div>;\n};\n","import * as React from \"react\";\nimport { Component } from \"react\";\nimport { callWin, resultObj } from \"./Player\";\nimport Reward from \"react-rewards\";\n\n// Important: To make the notifications to appear properly and rewards to work properly\n// The parent div should have position: relative\n\ninterface NotificationProps {\n  socket: any;\n  type: string;\n}\n\ninterface NotificationState {\n  notificationObj: callWin | resultObj | null;\n}\n\nfunction getUserName(obj: any) {\n  return obj.calledWinUsername || obj.user.username;\n}\n\nfunction getMainHeading(obj: any) {\n  let mainHeading;\n  if (obj.result !== undefined) {\n    // this is result Obj\n    mainHeading = obj.result + \" \" + obj.callWinType;\n  } else {\n    mainHeading = \"Call: \" + obj.callWinType;\n  }\n  return mainHeading;\n}\n\nclass Notification extends Component<NotificationProps, NotificationState> {\n  reward: any;\n  constructor(props: NotificationProps) {\n    super(props);\n    this.state = { notificationObj: null };\n  }\n\n  componentDidMount() {\n    let ticketBoardContainer = document.getElementById(\n      \"ticket-board-container\"\n    );\n    this.props.socket.on(\"callWinToHost\", (callWinObj: callWin) => {\n      this.reward.rewardMe();\n      this.setState({ notificationObj: callWinObj });\n      ticketBoardContainer?.setAttribute(\"style\", \"opacity:0.2;\");\n\n      // callWinToHost notification gets deleted after 5seconds on everyone's screen\n      setTimeout(() => {\n        this.deleteNotification();\n      }, 5000);\n    });\n    this.props.socket.on(\"resultsForPC\", (resultsObj: resultObj) => {\n      this.reward.rewardMe();\n      this.setState({ notificationObj: resultsObj });\n      ticketBoardContainer?.setAttribute(\"style\", \"opacity:0.2;\");\n\n      // Result notification gets deleted after 5seconds on everyone's screen\n      setTimeout(() => {\n        this.deleteNotification();\n      }, 5000);\n    });\n\n    \n  }\n\n  deleteNotification = () => {\n    this.setState({ notificationObj: null });\n    let ticketBoardContainer = document.getElementById(\n      \"ticket-board-container\"\n    );\n    if (ticketBoardContainer)\n      ticketBoardContainer.setAttribute(\"style\", \"opacity: 1\");\n  };\n\n  render() {\n    let notificationComp = this.state.notificationObj ? (\n      <div className=\"notification-container\">\n        <div className=\"notification\">\n          <p className=\"main animated rubberBand\">\n            {getMainHeading(this.state.notificationObj)}\n          </p>\n          <p className=\"sub animated bounce\">\n            {getUserName(this.state.notificationObj)}\n          </p>\n        </div>\n      </div>\n    ) : null;\n    return (\n      <>\n        {notificationComp}\n        <Reward\n          ref={(ref: any) => {\n            this.reward = ref;\n          }}\n          type=\"confetti\"\n          config={{\n            elementCount: 100,\n            angle: 90,\n            spread: 90,\n            decay: 0.95,\n            lifetime: 150,\n          }}\n        ></Reward>\n      </>\n    );\n  }\n}\n\nexport default Notification;\n","import * as React from \"react\";\nimport { callWin } from \"./Player\";\n\nexport interface WaitingProps {\n  playerType: string;\n  socket: any;\n}\n\nexport interface WaitingState {\n  message: string;\n}\n\nclass Waiting extends React.Component<WaitingProps, WaitingState> {\n  constructor(props: WaitingProps) {\n    super(props);\n    this.state = { message: \"\" };\n  }\n\n  componentDidMount() {\n    this.props.socket.on(\"callWinToHost\", (callWinObj: callWin) => {\n      if (this.props.playerType === \"Host\") {\n        this.setState({\n          message: \"Other players are waiting on you to check tickets\",\n        });\n      } else {\n        this.setState({\n          message: \"Waiting for host to check the player tickets\",\n        });\n      }\n    });\n\n    this.props.socket.on(\"hostCompletedChecking\", () => {\n      this.setState({ message: \"\" });\n    });\n  }\n\n  render() {\n    return <p className=\"waiting\">{this.state.message}</p>;\n  }\n}\n\nexport default Waiting;\n","import * as React from \"react\";\nimport { Component } from \"react\";\n\ninterface TimerProps {\n  socket: any;\n  endGame: () => void;\n}\n\ninterface TimerState {\n  seconds: number;\n  hasGameEnded: boolean;\n}\n\nclass Timer extends Component<TimerProps, TimerState> {\n  constructor(props: TimerProps) {\n    super(props);\n    this.state = { seconds: 10, hasGameEnded: false };\n  }\n\n  interval: any;\n  componentDidMount() {\n    this.interval = setInterval(() => this.updateTimer(), 1000);\n  }\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  updateTimer = () => {\n    let prevSeconds = this.state.seconds;\n    if (prevSeconds >= 1) {\n      this.setState({\n        seconds: prevSeconds - 1,\n      });\n      if (prevSeconds === 1) {\n        this.props.endGame();\n      }\n    }\n  };\n\n  render() {\n    let className = \"\";\n    if (this.state.seconds > 0) {\n      className = \"animated infinite bounceIn\";\n    }\n    return (\n      <div className=\"game-over\">\n        <p>Game will be over in:</p>\n        <p className={\"timer \" + className}>{this.state.seconds}</p>\n      </div>\n    );\n  }\n}\n\nexport default Timer;\n","import * as React from \"react\";\nimport { Component } from \"react\";\nimport { BoardLine } from \"./BoardLine\";\nimport Notification from \"./Notification\";\nimport { BoxState } from \"./Box\";\nimport Waiting from \"./Waiting\";\nimport Timer from \"./Timer\";\n\n//TODO: Fix some logic of duplicate keys for rows generated\n\n// Another variation: Right now the host will check mark the numbers which are done;\n// What if he messes up? What if he could not maintain the board correctly and give awards to\n// the bogus ones without even realizing that he has not been maintaining the board properly;\n// We will have a rectify button which will actually change all the states of the boxes by looking\n// at the array. This is still easy to do.\n\ninterface BoardProps {\n  socket: any;\n  endGame: () => void;\n}\n\ninterface BoardState {\n  // This is the array that actually holds what numbers are checked and what are not in 1-90 order\n  allBoardNumbers: Array<Array<BoxState>>;\n\n  // Array of shuffled numbers\n  shuffledBoardNumbers: Array<number>;\n\n  // This is index of the shuffledBoardNumbers array. So tells basically which number should come next\n  goneNumbers: number;\n\n  // for timer\n  showTimer: boolean;\n}\n\n// Utility Functions\nfunction shuffle(a: Array<number>): Array<number> {\n  var j, x, i;\n  for (i = a.length - 1; i > 0; i--) {\n    j = Math.floor(Math.random() * (i + 1));\n    x = a[i];\n    a[i] = a[j];\n    a[j] = x;\n  }\n  return a;\n}\n\n// Creates an array of size 90 with 1-90 at indices 0-89\nfunction createArray(): Array<number> {\n  let a = [];\n  for (let i = 0; i < 90; ++i) {\n    a[i] = i + 1;\n  }\n  return a;\n}\n\nfunction createNumbersLine(n: number): Array<BoxState> {\n  // generates an array of 10 elements; from n - n+9\n  let a: Array<BoxState> = [];\n  for (let i = 0; i < 10; ++i) {\n    a[i] = { value: n + i, check: false };\n  }\n  return a;\n}\n\n// Function generates all numbers 1-90 in order for printing the board\nfunction generateAllBoardNumbers(): Array<Array<BoxState>> {\n  let a: Array<Array<BoxState>> = [];\n  for (let i = 0; i < 9; ++i) {\n    a[i] = createNumbersLine(i * 10 + 1);\n  }\n  return a;\n}\n\nfunction generateAllLines(allBoardNumbers: Array<Array<BoxState>>) {\n  let allLines = [];\n  for (let i = 0; i < allBoardNumbers.length; ++i) {\n    allLines.push(<BoardLine key={i} index={i} numbers={allBoardNumbers[i]} />);\n  }\n  return allLines;\n}\n\nclass Board extends Component<BoardProps, BoardState> {\n  constructor(props: BoardProps) {\n    super(props);\n    let boardNumbersArray = shuffle(createArray());\n    this.state = {\n      shuffledBoardNumbers: boardNumbersArray,\n      goneNumbers: 0,\n      allBoardNumbers: generateAllBoardNumbers(),\n      showTimer: false,\n    };\n  }\n\n  componentDidMount() {\n    this.props.socket.on(\"showTimer\", () => {\n      // Disable the generate new button\n      let generateNewButton = document.querySelector(\n        \"button.new-number\"\n      ) as HTMLInputElement;\n      generateNewButton.disabled = true;\n      generateNewButton.classList.add(\"disabled-button\");\n      this.setState({ showTimer: true });\n    });\n    this.props.socket.on(\"callWinToHost\", () => {\n      if (this.state.showTimer === true) this.setState({ showTimer: false });\n    });\n  }\n\n  handleNewNumber = (newNumber: number) => {\n    let columnNumber = newNumber % 10 === 0 ? 9 : (newNumber % 10) - 1;\n    let rowNum =\n      newNumber % 10 === 0 ? newNumber / 10 - 1 : Math.floor(newNumber / 10);\n    let allBoardNumbers = this.state.allBoardNumbers;\n    allBoardNumbers[rowNum][columnNumber] = {\n      value: newNumber,\n      check: true,\n    };\n    this.setState({\n      allBoardNumbers: allBoardNumbers,\n      goneNumbers: this.state.goneNumbers + 1,\n    });\n  };\n\n  render() {\n    let timer = null;\n    if (this.state.showTimer) {\n      timer = <Timer socket={this.props.socket} endGame={this.props.endGame} />;\n    }\n\n    let newNumber = 0;\n    let allLines = generateAllLines(this.state.allBoardNumbers);\n    return (\n      <div className=\"board-component-main\">\n        <button\n          className={\"new-number\"}\n          onClick={() => {\n            newNumber = this.state.shuffledBoardNumbers[this.state.goneNumbers];\n            this.handleNewNumber(newNumber);\n            this.props.socket.emit(\"newNumber\", newNumber);\n          }}\n        >\n          Generate New\n        </button>\n\n        <button \n          className={\"new-number\"}\n          onClick={() => {\n           // newNumber = this.state.shuffledBoardNumbers[this.state.goneNumbers];\n           // this.handleNewNumber(newNumber);\n           \n            this.props.socket.emit(\"GameFinished\");\n\n          }}\n        >\n         End Game\n        </button>\n        <div>\n          <div className=\"new-number-host-container\">\n            <p className={\"new-number-host\"}>\n              {this.state.shuffledBoardNumbers[this.state.goneNumbers - 1]\n                ? this.state.shuffledBoardNumbers[this.state.goneNumbers - 1]\n                : \"\"}\n            </p>\n          </div>\n        </div>\n        {timer}\n        <Waiting socket={this.props.socket} playerType=\"Host\" />\n        <div className=\"notification-parent\">\n          {/* This div is for setting the opacity when notification is shown */}\n          <div id=\"ticket-board-container\" className=\"no-click\">\n            {allLines}\n          </div>\n          <Notification socket={this.props.socket} type=\"host\" />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Board;\n","import * as React from \"react\";\nimport Box from \"./Box\";\nimport { BoxState } from \"./Box\";\n\nfunction generateBoxComponents(\n  numbers: Array<BoxState>,\n  callback: (boxIndex: number, check: boolean) => void\n) {\n  let boxes = [];\n  for (let i = 0; i < numbers.length; ++i) {\n    boxes[i] = (\n      <Box\n        key={i}\n        value={numbers[i].value}\n        check={numbers[i].check}\n        changeTicketState={callback}\n        index={i}\n      />\n    );\n  }\n  return boxes;\n}\n\ninterface LineProps {\n  index: number;\n  numbers: Array<BoxState>;\n  changeTicketState: (\n    lineIndex: number,\n    boxIndex: number,\n    check: boolean\n  ) => void;\n}\n\nfunction Line(props: LineProps) {\n  // this callback will be envoked from box component when it gets clicked\n  let changeTicketState = (boxIndex: number, check: boolean) => {\n    props.changeTicketState(props.index, boxIndex, check);\n  };\n  let boxes = generateBoxComponents(props.numbers, changeTicketState);\n\n  return <div className=\"line\">{boxes}</div>;\n}\n\nexport default Line;\n","import * as React from \"react\";\nimport Line from \"./Line\";\nimport { BoxState } from \"./Box\";\n\ninterface HouseProps {\n  houseIndex: number;\n  houseNumbers: Array<Array<BoxState>>;\n  changeTicketState: (\n    houseIndex: number,\n    lineIndex: number,\n    boxIndex: number,\n    check: boolean\n  ) => void;\n}\n\nfunction House(props: HouseProps) {\n  let changeTicketState = (\n    lineIndex: number,\n    boxIndex: number,\n    check: boolean\n  ): void => {\n    props.changeTicketState(props.houseIndex, lineIndex, boxIndex, check);\n  };\n\n  return (\n    <div>\n      <Line\n        key={0}\n        index={0}\n        numbers={props.houseNumbers[0]}\n        changeTicketState={changeTicketState}\n      />\n      <Line\n        key={1}\n        index={1}\n        numbers={props.houseNumbers[1]}\n        changeTicketState={changeTicketState}\n      />\n      <Line\n        key={2}\n        index={2}\n        numbers={props.houseNumbers[2]}\n        changeTicketState={changeTicketState}\n      />\n    </div>\n  );\n}\n\nexport default House;\n","import * as React from \"react\";\nimport House from \"./House\";\nimport { BoxState } from \"./Box\";\n\ninterface TicketProps {\n  // Don't need socket here when it generated on host's screen\n  socket?: any;\n\n  // number of houses\n  numHouses: number;\n\n  houses: Array<Array<Array<BoxState>>>;\n  changeTicketState?: (\n    houseIndex: number,\n    lineIndex: number,\n    boxIndex: number,\n    check: boolean\n  ) => void;\n}\n\nfunction Ticket(props: TicketProps) {\n  let changeTicketState = (\n    houseIndex: number,\n    lineIndex: number,\n    boxIndex: number,\n    check: boolean\n  ): void => {\n    if (props.changeTicketState)\n      props.changeTicketState(houseIndex, lineIndex, boxIndex, check);\n  };\n\n  let ticket = [];\n  for (let i = 0; i < props.numHouses; ++i) {\n    ticket[i] = (\n      <>\n        <House\n          key={i}\n          changeTicketState={changeTicketState}\n          houseNumbers={props.houses[i]}\n          houseIndex={i}\n        />\n        <br />\n      </>\n    );\n  }\n  return <div>{ticket}</div>;\n}\n\nexport default Ticket;\n","import * as React from \"react\";\nimport { Component } from \"react\";\nimport { Award } from \"./Config\";\nimport GoneNumbers from \"./GoneNumbers\";\n\ninterface WinningButtonsProps {\n  awards: Award[];\n  winCallBack: (callWinType: string) => void;\n}\n\ninterface WinningButtonsState {}\n\nclass WinningButtons extends Component<\n  WinningButtonsProps,\n  WinningButtonsState\n> {\n  awardButtons: JSX.Element[];\n  constructor(props: WinningButtonsProps) {\n    super(props);\n    this.awardButtons = [];\n\n    for (let i = 1; i < this.props.awards.length; ++i) {\n      this.awardButtons.push(\n        <button\n          key={i}\n          onClick={() => {\n            console.log(this.props.awards[i].nameAward)\n          //  this.props.winCallBack(this.props.awards[i].nameAward);\n          }}\n        >\n          {this.props.awards[i].nameAward}\n        </button>\n      );\n    }\n  }\n\n  render() {\n    return <div className={\"winning-buttons\"}>{this.awardButtons}</div>;\n  }\n}\n\nexport default WinningButtons;\n","import * as React from \"react\";\nimport { Component } from \"react\";\n\ninterface GoneNumbersProps {\n  numbers: Array<number>;\n}\n\ninterface GoneNumbersState {}\n\nclass GoneNumbers extends Component<GoneNumbersProps, GoneNumbersState> {\n  constructor(props: GoneNumbersProps) {\n    super(props);\n    this.state = {\n      isShown: false,\n    };\n  }\n\n  render() {\n    let mainComp = [];\n    for (let i = this.props.numbers.length - 1; i >= 0; --i) {\n      mainComp.push(<p key={i}>{this.props.numbers[i]}</p>);\n    }\n    return (\n      <div className=\"gone-numbers-container\">\n        <button\n          id=\"gone-numbers-button\"\n          onClick={() => {\n            let goneNumbers = document.getElementById(\"gone-numbers-menu\");\n            let button = document.getElementById(\"gone-numbers-button\");\n            if (goneNumbers !== null && button !== null) {\n              if (\n                window\n                  .getComputedStyle(goneNumbers)\n                  .getPropertyValue(\"display\") !== \"none\"\n              ) {\n                goneNumbers.style.display = \"none\";\n                button.innerHTML = \"Gone Numbers\";\n              } else {\n                goneNumbers.style.display = \"block\";\n                goneNumbers.classList.add(\"animated\", \"fadeIn\");\n                button.innerHTML = \"X\";\n              }\n            }\n          }}\n        >\n          Gone Numbers\n        </button>\n        <div id=\"gone-numbers-menu\">{mainComp}</div>\n      </div>\n    );\n  }\n}\n\nexport default GoneNumbers;\n","import * as React from \"react\";\nimport { Component } from \"react\";\nimport GoneNumbers from \"./GoneNumbers\";\n\ninterface NewNumberProps {\n  socket: any;\n}\n\ninterface NewNumberState {\n  newNumber: number;\n}\n\nexport interface newNumberObj_t {\n  newNumber: number;\n}\n\nclass NewNumber extends Component<NewNumberProps, NewNumberState> {\n  goneNumbers: Array<number>;\n  constructor(props: NewNumberProps) {\n    super(props);\n    this.state = { newNumber: 0 };\n    this.goneNumbers = [];\n  }\n\n  componentDidMount() {\n    this.props.socket.on(\n      \"newNumberFromHost\",\n      (newNumberObj: newNumberObj_t) => {\n        this.goneNumbers.push(newNumberObj.newNumber);\n        this.setState({ newNumber: newNumberObj.newNumber });\n      }\n    );\n  }\n\n  // For generating random key for every render so that dom is manipulated every\n  // single time for new render to display the animation\n  generateRandomKey = () => {\n    return Math.random() * 10000;\n  };\n\n  render() {\n    let newNumberComponent = (\n      <>\n        <p className=\"new-number-player\">New Number </p>\n        <div>\n          <div\n            key={this.generateRandomKey()}\n            className=\"new-number-player-container custom-pulse\"\n          >\n            <p className=\"only-new-number-player\">\n              {this.state.newNumber ? this.state.newNumber : \"\"}\n            </p>\n          </div>\n        </div>\n        <GoneNumbers numbers={this.goneNumbers} />\n      </>\n    );\n    return newNumberComponent;\n  }\n}\n\nexport default NewNumber;\n","import * as React from \"react\";\nimport { Component } from \"react\";\nimport Ticket from \"./Ticket\";\nimport { BoxState } from \"./Box\";\nimport { generateTicket } from \"../utils/utils\";\nimport WinningButtons from \"./WinningButtons\";\nimport NewNumber from \"./NewNumber\";\nimport Notification from \"./Notification\";\nimport { Award } from \"./Config\";\nimport Waiting from \"./Waiting\";\nimport Timer from \"./Timer\";\nimport Board from \"./Board\";\n\ninterface PcTicketProps {\n  socket: any;\n\n  // awards coming for winning buttons\n  awards: Award[];\n\n  // number of houses\n  numHouses: number;\n\n  endGame: () => void;\n}\n\ninterface PcTicketState {\n  showTimer: boolean;\n}\n\nclass PcTicket extends Component<PcTicketProps, PcTicketState> {\n  houses: Array<Array<Array<BoxState>>>;\n  constructor(props: PcTicketProps) {\n    super(props);\n    this.houses = generateTicket(this.props.numHouses);\n    this.state = { showTimer: false };\n  }\n  componentDidMount() {\n    this.props.socket.on(\"showTimer\", () => {\n      this.setState({ showTimer: true });\n    });\n\n    // hiding timer in case there is another call for win\n    this.props.socket.on(\"callWinToHost\", () => {\n      if (this.state.showTimer === true) this.setState({ showTimer: false });\n    });\n\n  }\n  changeTicketState = (\n    houseIndex: number,\n    lineIndex: number,\n    boxIndex: number,\n    check: boolean\n  ): void => {\n    let { value } = this.houses[houseIndex][lineIndex][boxIndex];\n    this.houses[houseIndex][lineIndex][boxIndex] = { value: value, check };\n    console.log(\"here it is after changing\", this.houses);\n  };\n\n  handleWinningCall = (callWinType: string) => {\n    // send ticket here as well\n    this.props.socket.emit(\"callWinFromPC\", {\n      callWinType: callWinType,\n      houses: this.houses,\n    });\n  };\n\n  winningButtons = (\n    <WinningButtons\n      key={0}\n      awards={this.props.awards}\n      winCallBack={this.handleWinningCall}\n    />\n  );\n\n  render() {\n    let timer = null;\n    if (this.state.showTimer) {\n      timer = <Timer socket={this.props.socket} endGame={this.props.endGame} />;\n    }\n\n    return (\n      <div className=\"pc-ticket\">\n        <NewNumber socket={this.props.socket} />\n        {timer}\n        <Waiting playerType=\"PC\" socket={this.props.socket} />\n        <div className=\"notification-parent\">\n          {/* This div is for setting the opacity when notification is shown */}\n          <div id=\"ticket-board-container\">\n            <Ticket\n              houses={this.houses}\n              changeTicketState={this.changeTicketState}\n              numHouses={this.props.numHouses}\n            />\n          </div>\n\n          <Notification socket={this.props.socket} type=\"Pc\" />\n        </div>\n\n        {this.winningButtons}\n      </div>\n    );\n  }\n}\n\nexport default PcTicket;\n","import * as React from \"react\";\n\ninterface ResultButtonsProps {\n  bogey: string;\n  win: string;\n  resultCallback: (result: string) => void;\n}\n\nfunction ResultButtons(props: ResultButtonsProps) {\n  return (\n    <div className=\"result-buttons\">\n      <button\n        onClick={() => {\n          props.resultCallback(props.win);\n        }}\n      >\n        {props.win}\n      </button>\n      <button\n        onClick={() => {\n          props.resultCallback(props.bogey);\n        }}\n      >\n        {props.bogey}\n      </button>\n    </div>\n  );\n}\n\nexport default ResultButtons;\n","import * as React from \"react\";\nimport Ticket from \"./Ticket\";\nimport ResultButtons from \"./ResultButtons\";\nimport { callWin } from \"./Player\";\nimport axios from 'axios';\nimport Board from \"./Board\";\nimport GoneNumbers from \"./GoneNumbers\";\n\n\ninterface HostTicketProps {\n  socket: any;\n  callWinObj: callWin;\n  removeTicketFromHost: (id: string) => void;\n}\n\nfunction HostTicket(props: HostTicketProps) {\n\n  var status = \"\";\n  //console.log(checkFirstLine(props.callWinObj.goneNumbers,props.callWinObj.houses[0][0]),props.callWinObj.callWinType)\n\n  if(props.callWinObj.callWinType == \"First Line\")\n  {\n    console.log(props.callWinObj.callWinType,props.callWinObj.goneNumbers,props.callWinObj.houses[0][0]);\n        status = checkLine(props.callWinObj.goneNumbers,props.callWinObj.houses[0][0]) ? \"True\" : \"False\";\n  }\n  if(props.callWinObj.callWinType == \"Second Line\")\n  {\n       console.log(props.callWinObj.callWinType,props.callWinObj.goneNumbers,props.callWinObj.houses[0][1]);\n        status = checkLine(props.callWinObj.goneNumbers,props.callWinObj.houses[0][1]) ? \"True\" : \"False\";\n  }\n  if(props.callWinObj.callWinType == \"Third Line\")\n  {\n    console.log(props.callWinObj.callWinType,props.callWinObj.goneNumbers,props.callWinObj.houses[0][2]);\n        status = checkLine(props.callWinObj.goneNumbers,props.callWinObj.houses[0][2]) ? \"True\" : \"False\";   \n  }   \n  if(props.callWinObj.callWinType == \"Corners\")\n  {\n        status = checkCorners(props.callWinObj.goneNumbers,props.callWinObj.houses[0][0],props.callWinObj.houses[0][1],props.callWinObj.houses[0][2]) ? \"True\" : \"False\";\n  }\n  if(props.callWinObj.callWinType == \"Full House\")\n  {\n        if(checkLine(props.callWinObj.goneNumbers,props.callWinObj.houses[0][0]) && checkLine(props.callWinObj.goneNumbers,props.callWinObj.houses[0][1]) && checkLine(props.callWinObj.goneNumbers,props.callWinObj.houses[0][2]))\n             status = \"True\";\n        else \n             status = \"False\";     \n  }\n\n  let handleResultCall = (result: string) => {\n    props.socket.emit(\"resultsFromHost\", {\n      result: result,\n      callWinType: props.callWinObj.callWinType,\n      userCalledForWin: props.callWinObj.user,\n    });\n\n\n    // if(result == \"Confirm Win!\")\n    // {\n    // axios({\n    //   method: 'post',\n    //   url: 'https://techkilla.com/tambola/tambola_result.php',\n    //   headers: { 'content-type': 'application/json' },\n    //   data: {name:props.callWinObj.user.username,emp_code:props.callWinObj.user.emp_code,award:props.callWinObj.callWinType}\n    // })\n    //   .then(result => {\n    //     console.log(\"result: \" + result.data);\n    //   })\n    //   .catch(error => console.log(error.message));\n    // }\n\n    // Key is concatenation of id and callWinType\n    props.removeTicketFromHost(\n      props.callWinObj.user.id + props.callWinObj.callWinType\n    );\n  };\n  let playerTicket = (\n    <div className=\"host-ticket\">\n      <br></br>\n      <p className=\"win-call-type\">{props.callWinObj.callWinType}</p>\n      <p className=\"player-name\">{props.callWinObj.user.username}'s Ticket (Win: {status})</p>\n      <div className=\"no-click\">\n        <Ticket\n          houses={props.callWinObj.houses}\n          numHouses={props.callWinObj.houses.length}\n        />\n      </div>\n      <ResultButtons\n        key={0}\n        win={\"Confirm Win!\"}\n        bogey={\"Bogey!\"}\n        resultCallback={handleResultCall}\n      />\n    </div>\n  );\n  return <>{playerTicket}</>;\n}\n\nfunction checkLine(goneNumbers:Array<Number>,line:Array<any>):boolean\n{\n    let count:number = 0;\n    for(var i=0;i<line.length;i++)\n    {\n        if(line[i].value == 0)\n        {\n          count++;\n        }\n        else if(isExist(goneNumbers,line[i].value) && line[i].check)\n        {\n            count++;\n        }\n    }\n    return (count == line.length);\n}\n\nfunction checkCorners(goneNumbers:Array<number>,line1:Array<any>,line2:Array<any>,line3:Array<any>):boolean\n{\n  let firstRowFirstNum:any = getCornerNumber(line1);\n  let firstRowLastNumber:any = getCornerNumber(line1.reverse());\n  let lastRowFirstNum:any = getCornerNumber(line3);\n  let lastRowLastNumber:any = getCornerNumber(line3.reverse());\n  let line:Array<any> = [firstRowFirstNum,firstRowLastNumber,lastRowFirstNum,lastRowLastNumber];\n\n  return checkLine(goneNumbers,line);\n}\n\nfunction getCornerNumber(line:Array<any>):any\n{\n  let num:any;\n  let count = 0;\n\n  do{\n    num = line[count];\n    count++;\n  }while(num.value != 0);\n\n  return num;\n}\n\n// function checkCorners(goneNumbers:Array<number>,line1:Array<any>,line2:Array<any>,line3:Array<any>):boolean\n// {\n//   let leftCorner:Array<any> = [line1[0],line2[0],line3[0]];\n//   let rightCorner:Array<any> = [line1[line1.length-1],line2[line2.length-1],line3[line3.length-1]];\n\n//   return (checkLine(goneNumbers,leftCorner) && checkLine(goneNumbers,rightCorner))\n// }\n\nfunction isExist(goneNumbers:Array<Number>,num:Number):boolean\n{\n  let result:boolean = false;\n\n  if(num == 0)\n    return true;\n\n   for(var i=0;i<goneNumbers.length;i++)\n   {\n     if(goneNumbers[i] == num)\n     {\n        result = true;\n        console.log(num,goneNumbers[i],\"exits\");\n        break;\n     }\n   }\n   return result;\n}\n\nexport default HostTicket;\n","import * as React from \"react\";\nimport { Component } from \"react\";\nimport { callWin } from \"./Player\";\nimport HostTicket from \"./HostTicket\";\nimport Joyride, { Step } from \"react-joyride\";\nimport Board from \"./Board\";\n\ninterface MultipleHostTicketProps {\n  socket: any;\n  showWalkthrough: boolean;\n}\n\ninterface MultipleHostTicketState {\n  ticketFromPlayers: { [id: string]: callWin };\n  runWalkthrough: boolean;\n}\n\nclass MultipleHostTicket extends Component<\n  MultipleHostTicketProps,\n  MultipleHostTicketState\n> {\n  hasWalkthroughShown: boolean;\n  constructor(props: MultipleHostTicketProps) {\n    super(props);\n    this.state = { ticketFromPlayers: {}, runWalkthrough: false };\n    \n    // hasWalkthrough shown handles this logic: \n    // if player tickets become zero then the tutorial is shown and hasWalkthrough shown\n    // becomes true and tutorial is never shown. This is the case when in props we receive\n    // showWalkthrough as true. If it is false then we just change hasWalkthrough shown to be\n    // true and then the walkThrough never playes\n    this.hasWalkthroughShown = !this.props.showWalkthrough;\n  }\n\n  walkThroughSteps: Step[] = [\n    {\n      target: \".host-ticket\",\n      content:\n        \"This is the player's ticket. They think they have won this award. Your task is to check the 'crossed' numbers on this ticket and tell the players if this is a valid win or a Bogey!\",\n      disableBeacon: true,\n      placement: \"bottom\",\n      disableOverlay: true,\n    },\n  ];\n\n  componentDidMount() {\n    this.props.socket.on(\"callWinToHost\", (callWinObj: callWin) => {\n      // updating values\n      let newTicketsState = this.state.ticketFromPlayers;\n      let runWalkthrough: boolean = this.hasWalkthroughShown ? false : true;\n\n      // JS does not support keys to be objects, so this is easy workaround for the\n      // case when same user made 2 different win calls at the same time; The key\n      // is a string concatenation of id and wintype\n      newTicketsState[callWinObj.user.id + callWinObj.callWinType] = callWinObj;\n      this.setState({\n        ticketFromPlayers: newTicketsState,\n        runWalkthrough: runWalkthrough,\n      });\n      // Disable the generate new button\n      let generateNewButton = document.querySelector(\n        \"button.new-number\"\n      ) as HTMLInputElement;\n      generateNewButton.disabled = true;\n      generateNewButton.classList.add(\"disabled-button\");\n    });\n  }\n\n  removeTicket = (idWinCall: string) => {\n    let newState = this.state.ticketFromPlayers;\n    delete newState[idWinCall];\n    this.setState({ ticketFromPlayers: newState });\n\n    // check if there is no HostTicket then enable the generate new button and emit event for 'Waiting' component\n    if (Object.keys(newState).length === 0 && newState.constructor === Object) {\n      let generateNewButton = document.querySelector(\n        \"button.new-number\"\n      ) as HTMLInputElement;\n      generateNewButton.disabled = false;\n      generateNewButton.classList.remove(\"disabled-button\");\n      this.props.socket.emit(\"hostCompletedChecking\");\n    }\n  };\n\n  render() {\n    let ticketComponents = [];\n    for (const [key, value] of Object.entries(this.state.ticketFromPlayers)) {\n      let ticket = (\n        <HostTicket\n          key={key}\n          socket={this.props.socket}\n          callWinObj={value}\n          removeTicketFromHost={this.removeTicket}\n        />\n      );\n      ticketComponents.push(ticket);\n    }\n    return (\n      <>\n        {ticketComponents}\n        <Joyride\n          steps={this.walkThroughSteps}\n          run={this.state.runWalkthrough}\n          continuous={true}\n          disableOverlayClose={true}\n          showProgress={true}\n          showSkipButton={true}\n          spotlightClicks={true}\n          styles={{\n            options: {\n              zIndex: 10000,\n              primaryColor: \"#0e141f\",\n              textColor: \"#0e141f\",\n            },\n          }}\n        />\n      </>\n    );\n  }\n}\n\nexport default MultipleHostTicket;\n","import * as React from \"react\";\nimport { Component } from \"react\";\nimport { resultObj } from \"./Player\";\nimport { Award } from \"./Config\";\nimport { newNumberObj_t } from \"./NewNumber\";\nimport \"../css/Prizes.css\";\n\ninterface PrizesProps {\n  socket: any;\n  awards: Award[];\n  playerType: string;\n  endGame: () => void;\n}\n\ninterface PrizesState {\n  // remaining awards should store, nameAward and numAward\n  remainingAwards: Award[];\n\n  // also keeping track of whoWonWhat\n  // string -> string[]\n  // nameAward -> players who have won it\n  whoWonWhat: {\n    [nameAward: string]: {\n      [onNumber: number]: string[];\n    };\n  };\n}\n\nclass Prizes extends Component<PrizesProps, PrizesState> {\n  newNumber: number = 0;\n  constructor(props: PrizesProps) {\n    super(props);\n    this.state = {\n      remainingAwards: this.props.awards,\n      whoWonWhat: {},\n    };\n  }\n\n  componentDidMount() {\n    // updating my copy of new number from the host\n    this.props.socket.on(\n      \"newNumberFromHost\",\n      (newNumberObj: newNumberObj_t) => {\n        this.newNumber = newNumberObj.newNumber;\n\n        // disable the winButton for which numaward = 0\n        for (let i = 0; i < this.state.remainingAwards.length; ++i) {\n          if (parseInt(this.state.remainingAwards[i].numAward) === 0) {\n            let winningButton = document.querySelector(\n              `.winning-buttons button:nth-child(${i})`\n            ) as HTMLInputElement;\n\n            // Will be null on host's screen\n            if (winningButton) {\n              winningButton.disabled = true;\n              winningButton.classList.add(\"disabled-button\");\n            }\n          }\n        }\n      }\n    );\n\n    this.props.socket.on(\"hostCompletedChecking\", () => {\n      let anyAwardsLeft: boolean = false;\n      for (let i = 0; i < this.state.remainingAwards.length; ++i) {\n        // Check if anyAwardsLeft, if not then game has ended\n        if (parseInt(this.state.remainingAwards[i].numAward) > 0)\n          anyAwardsLeft = true;\n      }\n\n      // timer logic\n      if (!anyAwardsLeft && this.props.playerType === \"Host\") {\n        this.props.socket.emit(\"showTimer\");\n      }\n    });\n\n    this.props.socket.on(\"resultsForPC\", (resultsObj: resultObj) => {\n      if (resultsObj.result === \"Confirm Win!\") {\n        let currAwards = this.state.remainingAwards;\n        let currWhoWonWhat = this.state.whoWonWhat;\n        for (let i = 0; i < currAwards.length; ++i) {\n          if (currAwards[i].nameAward === resultsObj.callWinType) {\n            // adding entry for new award\n            if (currWhoWonWhat[resultsObj.callWinType] === undefined) {\n              currWhoWonWhat[resultsObj.callWinType] = {};\n            }\n\n            if (\n              currWhoWonWhat[resultsObj.callWinType][this.newNumber] ===\n              undefined\n            ) {\n              currWhoWonWhat[resultsObj.callWinType][this.newNumber] = [\n                resultsObj.calledWinUsername,\n              ];\n\n              // decrement currAwards[i].numAward\n              let currNumAward = parseInt(currAwards[i].numAward);\n              --currNumAward;\n              currAwards[i].numAward = currNumAward.toString();\n            } else {\n              currWhoWonWhat[resultsObj.callWinType][this.newNumber].push(\n                resultsObj.calledWinUsername\n              );\n            }\n          }\n        }\n        this.setState({\n          remainingAwards: currAwards,\n          whoWonWhat: currWhoWonWhat,\n        });\n      }\n\n      \n\n    });\n\n   \n\n  }\n  render() {\n    // use state.remainingAwards to make a table\n    let zeroAwardsLeft = <span className=\"zero-awards-left\">x0</span>;\n\n    // component about figuring out who won what award along with ties\n    let whoWonComp = [];\n    for (let i = 0; i < this.state.remainingAwards.length; ++i) {\n      let tiedPlayers = [];\n      for (var key in this.state.whoWonWhat[\n        this.state.remainingAwards[i].nameAward\n      ]) {\n        if (\n          this.state.whoWonWhat[\n            this.state.remainingAwards[i].nameAward\n          ].hasOwnProperty(key)\n        ) {\n          tiedPlayers.push(\n            this.state.whoWonWhat[this.state.remainingAwards[i].nameAward][\n              key\n            ].join(\" | \")\n          );\n        }\n      }\n      whoWonComp.push(tiedPlayers.join(\", \"));\n    }\n\n    // rendering the actual prizes\n    let prizeComp = [];\n    for (let i = 1; i < this.state.remainingAwards.length; ++i) {\n      prizeComp.push(\n        <tr key={i}>\n          <td className=\"award\">{this.state.remainingAwards[i].nameAward}</td>\n          <td className=\"left\">\n            {this.state.remainingAwards[i].numAward === \"0\"\n              ? zeroAwardsLeft\n              : \"x\" + this.state.remainingAwards[i].numAward}\n          </td>\n          <td className=\"won-by\">{whoWonComp[i]}</td>\n        </tr>\n      );\n    }\n    return (\n      <div className=\"prizes-container\">\n        <p className=\"award-status\">Award Status</p>\n        <hr />\n        <table className=\"prizes\">\n          <tr>\n            <th className=\"award\">Award</th>\n            <th className=\"left\">Left</th>\n            <th className=\"won-by\">Won By</th>\n          </tr>\n          {prizeComp}\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default Prizes;\n","import * as React from \"react\";\nimport Joyride, { Step } from \"react-joyride\";\n\nexport interface WalkthroughProps {\n  type: \"game\" | \"config\";\n  playerType: \"PC\" | \"Host\";\n  runWalkthrough: boolean;\n}\n\nexport interface WalkthroughState {\n  // run: boolean;\n}\n\nclass Walkthrough extends React.Component<WalkthroughProps, WalkthroughState> {\n  diffTypeSteps: {\n    config: { PC: Step[]; Host: Step[] };\n    game: { PC: Step[]; Host: Step[] };\n  };\n  constructor(props: WalkthroughProps) {\n    super(props);\n    // this.state = { run: this.props.runWalkthrough };\n    let configHostSteps: Step[] = [\n      {\n        target: \".snackbar\",\n        content: (\n          <>\n          <h3>You are the host!</h3>\n          <p>Share this link with your friends so that they can play in this game created by you.</p>\n          </>\n        ),\n        disableBeacon: true,\n      },\n      {\n        target: \".config-table\",\n        content: \"You can use this section to add, delete or customize awards\",\n        disableBeacon: true,\n      },\n      {\n        target: \".ready-players-container\",\n        content: \"You will see all players and their status in the game here.\",\n        disableBeacon: true,\n      },\n      {\n        target: \".start-game\",\n        content:\n          \"Click this button after all players have joined to start the game.\",\n        disableBeacon: true,\n        spotlightClicks: false,\n      },\n    ];\n\n    let ConfigPCSteps: Step[] = [\n      {\n        target:\n          \"#pc-config-table > tbody > tr:nth-child(1) > td:nth-child(2) > input[type=number]\",\n        content: \"Select the number of tickets you want to play with.\",\n        disableBeacon: true,\n      },\n      {\n        target: \"button.ready\",\n        content:\n          'Click this button to mark yourself \"Ready\" after you select the number of tickets you want to play with.',\n        disableBeacon: true,\n      },\n      {\n        target: \".ready-players-container\",\n        content: \"You will see all players and their status in the game here.\",\n        disableBeacon: true,\n      },\n    ];\n\n    let gameHostSteps = [\n      {\n        target: \".new-number\",\n        content:\n          \"Clicking this generates a new random number which will be displayed on every player's screen.\",\n        disableBeacon: true,\n      },\n      {\n        target: \"table.prizes\",\n        content: \"Remaining awards and winners will be shown here.\",\n        disableBeacon: true,\n      },\n    ];\n\n    let gamePCSteps = [\n      {\n        target: \".new-number-player-container\",\n        content: \"The new random number called by the host will be shown here\",\n        disableBeacon: true,\n      },\n      {\n        target: \"#gone-numbers-button\",\n        content: \"To view all the previous numbers, click this button.\",\n        disableBeacon: true,\n      },\n      {\n        target: \"#ticket-board-container\",\n        content:\n          \"This is your Tambola ticket. You can cross a number if it matches the called number.\",\n        disableBeacon: true,\n      },\n      {\n        target: \".winning-buttons\",\n        content:\n          \"If you think you are winning an award, call for that award using these buttons. Your ticket will then be checked by the host for a Bogey!\",\n        disableBeacon: true,\n      },\n      {\n        target: \"table.prizes\",\n        content: \"Remaining awards and winners will be shown here.\",\n        disableBeacon: true,\n      },\n    ];\n\n    this.diffTypeSteps = {\n      config: { PC: ConfigPCSteps, Host: configHostSteps },\n      game: { PC: gamePCSteps, Host: gameHostSteps },\n    };\n  }\n  componentDidUpdate(prevProps: WalkthroughProps) {\n    console.log(\"componendidupdate called with run \", this.props.runWalkthrough)\n    if(this.props.runWalkthrough !== prevProps.runWalkthrough) {\n      this.setState({run: this.props.runWalkthrough});\n    }\n  }\n\n  render() {\n    let playerType = this.props.playerType;\n    let tutorialType = this.props.type;\n    const steps = this.diffTypeSteps[tutorialType][playerType];\n    return (\n      <>\n        <Joyride\n          steps={steps}\n          run={this.props.runWalkthrough}\n          continuous={true}\n          disableOverlayClose={true}\n          showProgress={true}\n          showSkipButton={true}\n          spotlightClicks={true}\n          styles={{\n            options: {\n              zIndex: 10000,\n              primaryColor: \"#0e141f\",\n              textColor: \"#0e141f\",\n            },\n          }}\n        />\n      </>\n    );\n  }\n}\n\nexport default Walkthrough;\n","import * as React from \"react\";\nimport { Component } from \"react\";\nimport Board from \"./Board\";\nimport { BoxState } from \"./Box\";\nimport PcTicket from \"./PcTicket\";\nimport MultipleHostTicket from \"./MultipleHostTickets\";\nimport { Award } from \"./Config\";\nimport Prizes from \"./Prizes\";\nimport Walkthrough from \"./Walkthrough\";\nimport Reward from \"react-rewards\";\nimport { doNotLeavePage } from \"../utils/utils\";\n\n\nexport interface callWin {\n  callWinType: string;\n  goneNumbers: Array<number>;\n  houses: Array<Array<Array<BoxState>>>;\n  user: { id: string; username: string; room: string,emp_code:string};\n}\n\nexport interface resultObj {\n  callWinType: string;\n  calledWinUsername: string;\n  calledWinUserEmpCode:string;\n  calledWinSocketId:String;\n  result: string;\n}\n\ninterface PlayerProps {\n  socket: any;\n  type: string; // type is either PC or host\n  name: string;\n  emp_code:string;\n\n  // awards coming for buttons and leaderboard\n  awards: Award[];\n\n  // for PC\n  numHouses: number;\n  runWalkthrough: boolean\n}\n\ninterface PlayerState {\n  hasGameEnded: boolean;\n}\n\nclass Player extends Component<PlayerProps, PlayerState> {\n  // The declarations are just for Host type\n  ticketFromPlayer: Array<Array<Array<BoxState>>> | undefined;\n  winningCallFromPlayer: string | undefined;\n  userCalledForWin: { id: string; username: string; room: string } | undefined;\n  reward: any;\n  constructor(props: PlayerProps) {\n    super(props);\n    this.state = {\n      hasGameEnded: false,\n    };\n  }\n\n  // This function will be called if game ends\n  endGame = () => {\n    this.setState({ hasGameEnded: true });\n    this.reward.rewardMe();\n    window.removeEventListener('beforeunload', doNotLeavePage);\n    let timesRun = 0;\n    let interval = setInterval(() => {\n      this.reward.rewardMe();\n      ++timesRun;\n      if (timesRun === 4) clearInterval(interval);\n    }, 2000);\n  };\n\n  render() {\n    let mainComponent = null;\n    let gameOverP = null;\n    let board;\n    let gameEndedCssClass = \"\";\n    if (this.state.hasGameEnded) {\n      // This css class changes the opacity and disable all the clicks.\n      // This is different from how it is handled in Notifications component\n      gameEndedCssClass = \"game-ended no-click\";\n      gameOverP = <p className=\"game-over animated rubberBand\">Game Over</p>;\n    }\n    if (this.props.type === \"PC\") {\n      mainComponent = (\n        <div className=\"everything-but-prizes\">\n          <Walkthrough type=\"game\" playerType=\"PC\" runWalkthrough={this.props.runWalkthrough}/>\n          <div className={gameEndedCssClass}>\n            <PcTicket\n              \n              socket={this.props.socket}\n              numHouses={this.props.numHouses}\n              awards={this.props.awards}\n              endGame={this.endGame}\n            />\n          </div>\n          {gameOverP}\n        </div>\n      );\n    } else if (this.props.type === \"Host\") {\n      mainComponent = (\n        <div className=\"everything-but-prizes\">\n          <Walkthrough type=\"game\" playerType=\"Host\" runWalkthrough={this.props.runWalkthrough}/>\n          <div className={gameEndedCssClass}>\n           <Board socket={this.props.socket} endGame={this.endGame}/>\n            <MultipleHostTicket socket={this.props.socket} showWalkthrough={this.props.runWalkthrough}/>\n          </div>\n          {gameOverP}\n        </div>\n      );\n    }\n    return (\n      <>\n        <div className=\"main-container\">\n          {mainComponent}\n          <Prizes\n            socket={this.props.socket}\n            awards={this.props.awards}\n            playerType={this.props.type}\n            endGame={this.endGame}\n          />\n        </div>\n        {/* This is just for game over confetti */}\n        <div className=\"game-over-reward\">\n          <Reward\n            ref={(ref: any) => {\n              this.reward = ref;\n            }}\n            type=\"confetti\"\n            config={{\n              elementCount: 90,\n              angle: 70,\n              spread: 70,\n              decay: 0.95,\n              lifetime: 100,\n            }}\n          ></Reward>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default Player;\n","import * as React from \"react\";\nimport { Component } from \"react\";\nimport \"../css/Snackbar.css\";\n\ninterface ToastProps {\n  message: string; // \"Click to copy the join link to your game\"\n  isShown: boolean;\n  initiallyHidden: boolean;\n  handleClose: () => void;\n}\n\ninterface ToastState {}\n\nclass Toast extends Component<ToastProps, ToastState> {\n  constructor(props: ToastProps) {\n    super(props);\n    this.state = { isShown: this.props.isShown };\n  }\n\n  render() {\n    let animation,\n      displayStyle = \"flex\";\n    if (this.props.isShown === false) {\n      animation = \"animated bounceOutRight\";\n    } else {\n      animation = \"animated bounceInRight\";\n    }\n    if (this.props.initiallyHidden) displayStyle = \"none\";\n    return (\n      <div className={animation}>\n        <div className=\"snackbar\" style={{ display: displayStyle }}>\n          <p className=\"snackbar-text\">{this.props.message}</p>\n          <button\n            onClick={() => {\n              this.props.handleClose();\n            }}\n          >\n            X\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Toast;\n","import * as React from \"react\";\nimport { Component } from \"react\";\nimport ConfigTable from \"./ConfigTable\";\nimport Player from \"./Player\";\nimport ReadyPlayers from \"./ReadyPlayers\";\nimport Snackbar from \"./Snackbar\";\nimport Walkthrough from \"./Walkthrough\";\nimport Modal from \"react-modal\";\nimport Toast from \"./Toast\";\nimport axios from 'axios';\nimport { resultObj} from \"./Player\";\nimport { ComponentType } from 'react';\n\n\n\nconst customModalStyles = {\n  content: {\n    top: \"50%\",\n    left: \"50%\",\n    right: \"auto\",\n    bottom: \"auto\",\n    marginRight: \"-50%\",\n    transform: \"translate(-50%, -50%)\",\n    backgroundColor: \"#0e141f\",\n  },\n  overlay: {\n    backgroundColor: \"rgba(255, 255, 255, 0.35)\",\n    transition: \"all 1s\",\n  },\n};\n\nexport interface Award {\n  // Actual type information:\n  // {\n  //    nameAward: string;\n  //    numAward: string;\n  // }\n  [index: string]: string;\n}\n\nexport interface PcStatus {\n  user: User;\n  ready: boolean;\n  numTickets: number;\n}\n\nexport interface User {\n  username: string;\n  id: string;\n  room: string;\n  emp_code:string;\n}\n\ninterface ConfigProps {\n  socket: any;\n  name: string;\n  emp_code:string;\n  \n}\n\ninterface ConfigState {\n  type: string;\n\n  // Config\n  readyHost: boolean;\n  readyClient: boolean;\n\n  //  Host Config State options\n  awards: Award[];\n\n  //  PC Config State options\n  numHouses: number;\n\n  numOfUsers:number;\n\n  // List of players who are ready to play\n  PcsStatus: PcStatus[];\n\n  // notification for host disconnected\n  hostDisconnected: boolean;\n\n  userName:String;\n  emp_code:String;\n  calledWinWithBogeyTicket:boolean;\n\n  gameFinished :boolean;\n\n  // For warning modal which opens when host hits start game if some player is not ready\n  isModalOpen: boolean;\n\n  // When host tries to start game when there is no one in the game room\n  isToastOpen: boolean;\n\n  // when arrive on host screen, ask the user if they want to see tutorial or not\n  watchTutorialModal: boolean\n\n  // passed to child components to let them know if user selected to watch the tutorial or not\n  runWalkthrough: boolean\n  //\n  hasGameAlreadyStarted: boolean;\n}\n\nclass Config extends Component<ConfigProps, ConfigState> {\n  // For the toast component to hide initially and not add animation on initial render\n  hideToastInitially: boolean;\n  constructor(props: ConfigProps) {\n    super(props);\n    this.state = {\n      type: \"PC\",\n      numHouses: 1,\n       numOfUsers:0,\n       userName:\"\",\n       emp_code:\"\",\n      readyHost: false,\n      readyClient: true,\n      gameFinished:false,\n      PcsStatus: [],\n      isModalOpen: false,\n      isToastOpen: false,\n      watchTutorialModal: true,\n      runWalkthrough: false,\n      hasGameAlreadyStarted: false,\n      calledWinWithBogeyTicket:false,\n      awards: [\n        {\n          nameAward: \"Users\",\n          numAward: \"1\",\n        },\n        {\n          nameAward: \"First Line\",\n          numAward: \"1\",\n        },\n        {\n          nameAward: \"Second Line\",\n          numAward: \"1\",\n        },\n        {\n          nameAward: \"Third Line\",\n          numAward: \"1\",\n        },\n        {\n          nameAward: \"Corners\",\n          numAward: \"1\",\n        },\n        {\n          nameAward: \"Full House\",\n          numAward: \"1\",\n        },\n      ],\n      hostDisconnected: false,\n    };\n    this.hideToastInitially = true;\n  }\n\n  // Only handles on host's config when he presses start game button.\n  handlleHostConfigDone = () => {\n    if (this.state.isModalOpen) {\n      this.setState({ isModalOpen: false });\n    }\n    this.props.socket.emit(\"HostConfigDone\", this.state.awards);\n    console.log(\"config submitted from host\", this.state.awards);\n  };\n\n  componentDidMount() {\n    // Extracting roomID from the URL\n    let roomID = window.location.pathname.substr(\n      window.location.pathname.lastIndexOf(\"/\") + 1\n    );\n\n    const queryParams = new URLSearchParams(window.location.search);\n      const type = queryParams.get('type') as string;\n      \n      this.setState({\n        type: type, // pass this type to player as well\n      });\n\n      if(type == \"PC\")\n      {\n       console.log(\"emp_code: \" + this.props.emp_code)\n          axios({\n            method: 'post',\n            url: 'https://techkilla.com/tambola/tambola_users.php',\n            headers: { 'content-type': 'application/json' },\n            data: {name:this.props.name,emp_code:this.props.emp_code}\n          })\n            .then(result => {\n              console.log(\"result: \" + result.data);\n            })\n            .catch(error => console.log(error.message));\n    \n      }\n\n    // asking server to join room\n    this.props.socket.emit(\"joinRoom\", {\n      room: roomID,\n      username: this.props.name,\n      emp_code: this.props.emp_code,\n    });\n\n    // check if the game has already started or not\n    this.props.socket.on(\"gameHasAlreadyStarted\", () => {\n      this.setState({ hasGameAlreadyStarted: true });\n    });\n\n    this.props.socket.on('numOfUsers',(roomSize:number)=>{\n        this.setState({numOfUsers:roomSize})\n    })\n\n    \n\n    // server response: player gets know if he is host or pc\n    this.props.socket.on(\"userConnected\", (playerTypeObj: any) => {\n      \n\n      // Receiving event on Host from new PC who has joined and sending them\n      // the list of readyPlayers\n      if (playerTypeObj.type === \"Host\") {\n        this.props.socket.on(\"notifyHostConnection\", (user: User) => {\n          let PcsStatus = this.state.PcsStatus;\n          let newPcStatus: PcStatus = {\n            user: user,\n            ready: false,\n            numTickets: 0,\n          };\n          PcsStatus.push(newPcStatus);\n          this.setState({ PcsStatus: PcsStatus });\n          this.props.socket.emit(\"PcsStatus\", user, PcsStatus);\n        });\n\n       \n\n        this.props.socket.on(\"PcReady\", (user: User, numTickets: number) => {\n          // Find user in array and make him ready\n          let PcsStatus = this.state.PcsStatus;\n          for (let i = 0; i < PcsStatus.length; ++i) {\n            if (PcsStatus[i].user.id === user.id) {\n              PcsStatus[i].ready = true;\n              PcsStatus[i].numTickets = numTickets;\n            }\n          }\n          this.setState({ PcsStatus: PcsStatus });\n          this.props.socket.emit(\"PcsStatus\", user, PcsStatus);\n        });\n\n        this.props.socket.on(\"userDisconnect\", (user: User) => {\n          // dealing with ready/not ready\n          let PcsStatus = this.state.PcsStatus;\n          for (let i = 0; i < PcsStatus.length; ++i) {\n            if (PcsStatus[i].user.id === user.id) {\n              // Remove this user from PcsStatus\n              PcsStatus.splice(i, 1);\n            }\n          }\n          this.setState({ PcsStatus: PcsStatus });\n          this.props.socket.emit(\"PcsStatus\", user, PcsStatus);\n        });\n      }\n    });\n\n    // server sending awards from Host as Host is ready\n    this.props.socket.on(\"HostConfigDone\", (awards: any) => {\n      this.setState({\n        awards: awards,\n        readyHost: true,\n      });\n    });\n\n    this.props.socket.on(\"resultsForPC\", (resultsObj: resultObj) => {\n        if(this.props.name == resultsObj.calledWinUsername && this.props.emp_code == resultsObj.calledWinUserEmpCode)\n        {\n          if (resultsObj.result === \"Bogey!\") {\n            this.props.socket.disconnect();\n            this.setState({\n              calledWinWithBogeyTicket:true\n            })\n          }else\n          {\n            console.log(\"emp_code winning: \" + this.props.emp_code)\n\n            axios({\n              method: 'post',\n              url: 'https://techkilla.com/tambola/tambola_result.php',\n              headers: { 'content-type': 'application/json' },\n              data: {name:resultsObj.calledWinUsername,emp_code:resultsObj.calledWinUserEmpCode,award:resultsObj.callWinType}\n            })\n              .then(result => {\n                console.log(\"result: \" + result.data);\n              })\n              .catch(error => console.log(error.message));\n            \n          }//\n        }\n    });\n\n    // Know the status of all the players if someone new joined or got ready\n    this.props.socket.on(\"PcsStatus\", (PcsStatus: PcStatus[]) => {\n      this.setState({ PcsStatus: PcsStatus });\n    });\n\n    // Host disconnect\n    this.props.socket.on(\"HostDisconnected\", (userHost: User) => {\n      console.log(userHost, \": host disconnected\");\n      this.setState({\n        hostDisconnected: true,\n      });\n      this.props.socket.disconnect();\n    });\n\n    this.props.socket.on(\"GameFinished\", () => {\n      console.log(\"Game Finished\");\n      if(this.state.type == \"PC\")\n          this.props.socket.disconnect();\n          \n      this.setState({\n        gameFinished:true,\n      });\n    });\n\n    \n  }\n\n  // For Host Config\n  handleChangeHost = (idx: number) => (e: any) => {\n    const eTarget = e.target;\n    let name: string = eTarget.name;\n    let value: string = eTarget.value;\n\n    const awards = this.state.awards;\n\n    awards[idx][name] = value;\n\n    this.setState({\n      awards,\n    });\n  };\n  handleAddRow = () => {\n    const item = {\n      nameAward: \"\",\n      numAward: \"\",\n    };\n    this.setState({\n      awards: [...this.state.awards, item],\n    });\n  };\n  handleRemoveRow = () => {\n    this.setState({\n      awards: this.state.awards.slice(0, -1),\n    });\n  };\n  handleRemoveSpecificRow = (idx: number) => () => {\n    const awards = [...this.state.awards];\n    awards.splice(idx, 1);\n    this.setState({ awards });\n  };\n\n  // For PC Config\n  handleChangePC = (event: any) => {\n    const { value } = event.target;\n    if (this.state.type === \"PC\") {\n      // sanity check\n      this.setState({\n        numHouses: value,\n      });\n    }\n  };\n\n  // common function for Host and PC Config\n  handleSubmit = (event: any) => {\n    this.setState({\n      readyClient: true,\n    });\n    if (this.state.type === \"Host\") {\n      // start the game only when there are actual players in the game\n      if (this.state.numOfUsers > 0) {\n        // checking if all the players are ready\n        let isEveryOneReady = true;\n        for (let i = 0; i < this.state.PcsStatus.length; ++i) {\n          if (!this.state.PcsStatus[i].ready) {\n            isEveryOneReady = true;\n            continue;\n          }\n        }\n        if (isEveryOneReady) {\n          this.handlleHostConfigDone();\n        } else {\n          this.setState({ isModalOpen: true });\n        }\n      } else {\n        // To make the toast visible\n        this.hideToastInitially = false;\n        this.setState({ isToastOpen: true });\n      }\n    } else if (this.state.type === \"PC\") {\n      //let everyone know that i am ready. Backend knows who I am by socket.id\n      this.props.socket.emit(\"PcReady\", this.state.numHouses);\n    }\n    event.preventDefault();\n  };\n\n  render() {\n    // game is over if there is no host\n    if (this.state.hostDisconnected) {\n      return (\n        <>\n          <h1 className=\"host-configuration\">\n            Host left the game. Please close this tab. Generate a new room if\n            you want to play more.\n          </h1>\n          <a href={String(window.location)} style={{ color: \"white\" }}>\n            <button>Back</button>\n          </a>\n        </>\n      );\n    }\n\n    if (this.state.calledWinWithBogeyTicket) {\n      return (\n        <>\n          <h1 className=\"host-configuration\">\n             Unfortunatly your ticket was bogey. Thankyou for playing .\n          </h1>\n        </>\n      );\n    }\n\n    if (this.state.gameFinished && this.state.type == \"Host\") {\n      return (\n        <>\n          <h1 className=\"host-configuration\">\n            Game Finished. Thankyou for playing.\n          </h1>\n          <a href={String(window.location)} style={{ color: \"white\" }}>\n           \n            <button>Back</button>\n          </a>\n        </>\n      );\n    }else if(this.state.gameFinished)\n    {\n      return (\n        <>\n          <h1 className=\"host-configuration\">\n            Game Finished. Thankyou for playing.\n          </h1>\n        </>\n      );\n    }\n\n    // If new playerjoins in already started game or host becomes ready (starts the game)\n    // this pc is not ready, let him know that he cannot play now in this game\n    // if (\n    //   this.state.hasGameAlreadyStarted ||\n    //   (this.state.readyHost && !this.state.readyClient)\n    // ) {\n    //   return (\n    //     <>\n    //       <h1 className=\"host-configuration\">\n    //         This game was started without you. You can play in the next game.\n    //         Meanwhile you can go back to the home screen and play another game\n    //         :)\n    //       </h1>\n    //       <a href=\"/\" style={{ color: \"white\" }}>\n    //         <button>Home</button>\n    //       </a>\n    //     </>\n    //   );\n    // }\n\n    let mainComponent = null;\n    if (this.state.readyHost && this.state.readyClient) {\n      // display player\n      mainComponent = (\n        <Player\n          socket={this.props.socket}\n          numHouses={this.state.numHouses}\n          name={this.props.name}\n          emp_code = {this.props.emp_code}\n          type={this.state.type}\n          awards={this.state.awards}\n          runWalkthrough={this.state.runWalkthrough}\n        />\n      );\n    } else if (this.state.type === \"Host\") {\n      // form for host configuration\n      //    Choosing Awards\n      // pass handleSubmit as a prop\n      this.state.awards[0] = {nameAward:\"Users\",numAward:String(this.state.numOfUsers)};\n      mainComponent = (\n        <div className=\"config-container\">\n          <Walkthrough playerType=\"Host\" type=\"config\" runWalkthrough={this.state.runWalkthrough}/>\n          {/* <SnackbarIts instance type 'ReactModal' is not a valid JSX element.\n            message=\"Share this 'join link' with other players\"\n            actionText=\"Copy Link\"\n          /> */}\n          <Toast\n            message={\"There are no players in the game right now\"}\n            isShown={this.state.isToastOpen}\n            handleClose={() => {\n              this.setState({ isToastOpen: false });\n            }}\n            initiallyHidden={this.hideToastInitially}\n          />\n          {/* <Modal isOpen={this.state.isModalOpen} style={customModalStyles}>\n            <h3>Some players are still not ready.</h3>\n            <h3>Are you sure you want to start the game?</h3>\n            <div className=\"modal-buttons\">\n              <button onClick={this.handlleHostConfigDone}>Yes</button>\n              <button\n                onClick={() => {\n                  this.setState({ isModalOpen: false });\n                }}\n              >\n                No\n              </button>\n            </div>\n          </Modal> */}\n          <h1 className=\"host-configuration\">Game Setup</h1>\n          <hr />\n          \n          <ConfigTable\n            awards={this.state.awards}\n            handleChangeHost={this.handleChangeHost}\n            handleAddRow={this.handleAddRow}\n            handleRemoveRow={this.handleRemoveRow}\n            handleRemoveSpecificRow={this.handleRemoveSpecificRow}\n            handleSubmit={this.handleSubmit}\n          />\n         \n        </div>\n      );\n    } else if (this.state.type === \"PC\") {\n      // form for PC configuration\n      //    Number of Tickets\n      mainComponent = (\n        <div className=\"config-container\">\n          <Walkthrough playerType=\"PC\" type=\"config\" runWalkthrough={this.state.runWalkthrough}/>\n          <h1 className=\"pc-configuration\">Player Setup</h1>\n          <hr />\n          <form onSubmit={this.handleSubmit}>\n            <table className=\"config-table\" id=\"pc-config-table\">\n              <tbody>\n                <tr>\n                  <td className=\"number-tickets\">Number of Users:</td>\n                  <td>\n                    <input\n                      type=\"number\"\n                      max=\"6\"\n                      min=\"1\"\n                      disabled\n                      value={String(this.state.numOfUsers)}\n                      onChange={this.handleChangePC}\n                      required\n                    />\n                  </td>\n                </tr>\n                <tr>\n                  <td>Waiting for host to start the game</td>\n                  <td>\n                  \n                  </td>\n                </tr>\n              </tbody>\n            </table>\n          </form>\n         \n        </div>\n      );\n    }\n    return (\n      <>\n        {mainComponent}\n       \n      </>\n    );\n  }\n}\n\nexport default Config;\n","import * as React from \"react\";\nimport { Component } from \"react\";\nimport Config from \"./Config\";\n\ninterface EnterNameProps {\n  socket: any;\n}\n\ninterface EnterNameState {\n  isEmpty: boolean;\n  name: string;\n  emp_code:string;\n  submitted: boolean;\n}\n\nclass EnterName extends Component<EnterNameProps, EnterNameState> {\n  constructor(props: EnterNameProps) {\n    super(props); \n    const queryParams = new URLSearchParams(window.location.search);\n    let uname = queryParams.get('name') as string;\n    let uemp_code = queryParams.get('emp_id') as string;\n\n    let randomId = '_' + Math.random().toString(36).substr(2, 9);\n\n    if(uname == undefined)\n         uname = \"guest\" + randomId;\n\n    if(uemp_code == undefined)\n         uemp_code = \"emp\" + randomId\n\n    this.state = { isEmpty: false, name: uname, submitted: true, emp_code:uemp_code};\n  }\n\n  handleChange = (event: any) => {\n    const { value } = event.target;\n    if (value !== \"\") {\n      this.setState({ isEmpty: false, name: value });\n    } else {\n      this.setState({ isEmpty: true, name: value });\n    }\n  };\n\n  handleKeyPress = (event: any) => {\n    const { value } = event.target;\n    if (event.key === \"Enter\" && value !== \"\") {\n      console.log(\"enter press here!\");\n      this.setState({\n        submitted: true,\n      });\n    }\n  };\n\n  handleSubmit = (event: any) => {\n    this.setState({\n      submitted: true,\n    });\n    event.preventDefault();\n  };\n\n  render() {\n    if (!this.state.submitted) {\n      let myStyles: React.CSSProperties = {};\n      if (!this.state.isEmpty) {\n        myStyles = { visibility: \"visible\" };\n      } else {\n        myStyles = { visibility: \"hidden\" };\n      }\n      let submitButton = (\n        <div style={myStyles}>\n          <button onClick={this.handleSubmit}>OK</button>\n        </div>\n      )\n\n      return (\n        <div className=\"enter-name-container\">\n          <div className=\"enter-name\">\n            <p className=\"enter-name-question\">Hi. What's your name?</p>\n            <input\n              id=\"enter-name\"\n              type=\"text\"\n              value={this.state.name}\n              placeholder=\"Type your answer here...\"\n              onChange={this.handleChange}\n              onKeyPress={this.handleKeyPress}\n              spellCheck=\"false\"\n              autoFocus\n            />\n            <br />\n            <br />\n            <br />\n            {submitButton}\n          </div>\n        </div>\n      );\n    } else {\n      return <Config socket={this.props.socket} name={this.state.name} emp_code={this.state.emp_code} />;\n    }\n  }\n}\n\nexport default EnterName;\n","import React from \"react\";\nimport { Component } from \"react\";\nimport \"../css/App.css\";\nimport io from \"socket.io-client\";\nimport EnterName from \"./EnterName\";\n\ninterface AppState {\n  socket: any;\n}\n\ninterface AppProps {}\n\nclass App extends Component<AppProps, AppState> {\n  constructor(props: any) {\n    super(props);\n    \n    this.state = {\n       // socket:io(),\n      socket: io('/', { upgrade: false, transports: ['websocket'] }),\n    };\n  }\n\n  render() {\n    return (\n      <>\n        <img className=\"logo\" src=\"../logo.png\" alt=\"\" />\n        <div className=\"App\">\n          <EnterName socket={this.state.socket} />\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {doNotLeavePage} from './utils/utils'\nimport \"./index.css\";\nimport App from \"./components/App\";\n\nwindow.addEventListener(\"beforeunload\", doNotLeavePage);\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n"],"sourceRoot":""}