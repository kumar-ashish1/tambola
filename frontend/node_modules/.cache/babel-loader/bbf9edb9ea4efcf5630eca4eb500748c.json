{"ast":null,"code":"import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";import _toConsumableArray from\"/Users/ashish/Documents/tambola2/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _classCallCheck from\"/Users/ashish/Documents/tambola2/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/ashish/Documents/tambola2/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/ashish/Documents/tambola2/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/ashish/Documents/tambola2/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import*as React from\"react\";import{Component}from\"react\";import ConfigTable from\"./ConfigTable\";import Player from\"./Player\";import Walkthrough from\"./Walkthrough\";import Modal from\"react-modal\";import Toast from\"./Toast\";import axios from'axios';var customModalStyles={content:{top:\"50%\",left:\"50%\",right:\"auto\",bottom:\"auto\",marginRight:\"-50%\",transform:\"translate(-50%, -50%)\",backgroundColor:\"#0e141f\"},overlay:{backgroundColor:\"rgba(255, 255, 255, 0.35)\",transition:\"all 1s\"}};var Config=/*#__PURE__*/function(_Component){_inherits(Config,_Component);var _super=_createSuper(Config);// For the toast component to hide initially and not add animation on initial render\nfunction Config(props){var _this;_classCallCheck(this,Config);_this=_super.call(this,props);_this.hideToastInitially=void 0;_this.handlleHostConfigDone=function(){if(_this.state.isModalOpen){_this.setState({isModalOpen:false});}_this.props.socket.emit(\"HostConfigDone\",_this.state.awards);console.log(\"config submitted from host\",_this.state.awards);};_this.handleChangeHost=function(idx){return function(e){var eTarget=e.target;var name=eTarget.name;var value=eTarget.value;var awards=_this.state.awards;awards[idx][name]=value;_this.setState({awards:awards});};};_this.handleAddRow=function(){var item={nameAward:\"\",numAward:\"\"};_this.setState({awards:[].concat(_toConsumableArray(_this.state.awards),[item])});};_this.handleRemoveRow=function(){_this.setState({awards:_this.state.awards.slice(0,-1)});};_this.handleRemoveSpecificRow=function(idx){return function(){var awards=_toConsumableArray(_this.state.awards);awards.splice(idx,1);_this.setState({awards:awards});};};_this.handleChangePC=function(event){var value=event.target.value;if(_this.state.type===\"PC\"){// sanity check\n_this.setState({numHouses:value});}};_this.handleSubmit=function(event){_this.setState({readyClient:true});if(_this.state.type===\"Host\"){// start the game only when there are actual players in the game\nif(_this.state.numOfUsers>0){// checking if all the players are ready\nvar isEveryOneReady=true;for(var i=0;i<_this.state.PcsStatus.length;++i){if(!_this.state.PcsStatus[i].ready){isEveryOneReady=true;continue;}}if(isEveryOneReady){_this.handlleHostConfigDone();}else{_this.setState({isModalOpen:true});}}else{// To make the toast visible\n_this.hideToastInitially=false;_this.setState({isToastOpen:true});}}else if(_this.state.type===\"PC\"){//let everyone know that i am ready. Backend knows who I am by socket.id\n_this.props.socket.emit(\"PcReady\",_this.state.numHouses);}event.preventDefault();};_this.state={type:\"PC\",numHouses:1,numOfUsers:0,userName:\"\",emp_code:\"\",readyHost:false,readyClient:true,gameFinished:false,PcsStatus:[],isModalOpen:false,isToastOpen:false,watchTutorialModal:true,runWalkthrough:false,hasGameAlreadyStarted:false,calledWinWithBogeyTicket:false,awards:[{nameAward:\"Users\",numAward:\"1\"},{nameAward:\"First Line\",numAward:\"1\"},{nameAward:\"Second Line\",numAward:\"1\"},{nameAward:\"Third Line\",numAward:\"1\"},{nameAward:\"Corners\",numAward:\"1\"},{nameAward:\"Full House\",numAward:\"1\"}],hostDisconnected:false};_this.hideToastInitially=true;return _this;}// Only handles on host's config when he presses start game button.\n_createClass(Config,[{key:\"componentDidMount\",value:function componentDidMount(){var _this2=this;// Extracting roomID from the URL\nvar roomID=window.location.pathname.substr(window.location.pathname.lastIndexOf(\"/\")+1);var queryParams=new URLSearchParams(window.location.search);var type=queryParams.get('type');this.setState({type:type// pass this type to player as well\n});if(type==\"PC\"){console.log(\"emp_code: \"+this.props.emp_code);axios({method:'post',url:'https://techkilla.com/tambola/tambola_users.php',headers:{'content-type':'application/json'},data:{name:this.props.name,emp_code:this.props.emp_code}}).then(function(result){console.log(\"result: \"+result.data);}).catch(function(error){return console.log(error.message);});}// asking server to join room\nthis.props.socket.emit(\"joinRoom\",{room:roomID,username:this.props.name,emp_code:this.props.emp_code});// check if the game has already started or not\nthis.props.socket.on(\"gameHasAlreadyStarted\",function(){_this2.setState({hasGameAlreadyStarted:true});});this.props.socket.on('numOfUsers',function(roomSize){_this2.setState({numOfUsers:roomSize});});// server response: player gets know if he is host or pc\nthis.props.socket.on(\"userConnected\",function(playerTypeObj){// Receiving event on Host from new PC who has joined and sending them\n// the list of readyPlayers\nif(playerTypeObj.type===\"Host\"){_this2.props.socket.on(\"notifyHostConnection\",function(user){var PcsStatus=_this2.state.PcsStatus;var newPcStatus={user:user,ready:false,numTickets:0};PcsStatus.push(newPcStatus);_this2.setState({PcsStatus:PcsStatus});_this2.props.socket.emit(\"PcsStatus\",user,PcsStatus);});_this2.props.socket.on(\"PcReady\",function(user,numTickets){// Find user in array and make him ready\nvar PcsStatus=_this2.state.PcsStatus;for(var i=0;i<PcsStatus.length;++i){if(PcsStatus[i].user.id===user.id){PcsStatus[i].ready=true;PcsStatus[i].numTickets=numTickets;}}_this2.setState({PcsStatus:PcsStatus});_this2.props.socket.emit(\"PcsStatus\",user,PcsStatus);});_this2.props.socket.on(\"userDisconnect\",function(user){// dealing with ready/not ready\nvar PcsStatus=_this2.state.PcsStatus;for(var i=0;i<PcsStatus.length;++i){if(PcsStatus[i].user.id===user.id){// Remove this user from PcsStatus\nPcsStatus.splice(i,1);}}_this2.setState({PcsStatus:PcsStatus});_this2.props.socket.emit(\"PcsStatus\",user,PcsStatus);});}});// server sending awards from Host as Host is ready\nthis.props.socket.on(\"HostConfigDone\",function(awards){_this2.setState({awards:awards,readyHost:true});});this.props.socket.on(\"resultsForPC\",function(resultsObj){if(_this2.props.name==resultsObj.calledWinUsername&&_this2.props.emp_code==resultsObj.calledWinUserEmpCode){if(resultsObj.result===\"Bogey!\"){_this2.props.socket.disconnect();_this2.setState({calledWinWithBogeyTicket:true});}else{console.log(\"emp_code winning: \"+_this2.props.emp_code);axios({method:'post',url:'https://techkilla.com/tambola/tambola_result.php',headers:{'content-type':'application/json'},data:{name:resultsObj.calledWinUsername,emp_code:resultsObj.calledWinUserEmpCode,award:resultsObj.callWinType}}).then(function(result){console.log(\"result: \"+result.data);}).catch(function(error){return console.log(error.message);});}//\n}});// Know the status of all the players if someone new joined or got ready\nthis.props.socket.on(\"PcsStatus\",function(PcsStatus){_this2.setState({PcsStatus:PcsStatus});});// Host disconnect\nthis.props.socket.on(\"HostDisconnected\",function(userHost){console.log(userHost,\": host disconnected\");_this2.setState({hostDisconnected:true});_this2.props.socket.disconnect();});this.props.socket.on(\"GameFinished\",function(){console.log(\"Game Finished\");if(_this2.state.type==\"PC\")_this2.props.socket.disconnect();_this2.setState({gameFinished:true});});}// For Host Config\n},{key:\"render\",value:function render(){var _this3=this;// game is over if there is no host\nif(this.state.hostDisconnected){return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"h1\",{className:\"host-configuration\",children:\"Host left the game. Please close this tab. Generate a new room if you want to play more.\"}),/*#__PURE__*/_jsx(\"a\",{href:String(window.location),style:{color:\"white\"},children:/*#__PURE__*/_jsx(\"button\",{children:\"Back\"})})]});}if(this.state.calledWinWithBogeyTicket){return/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsx(\"h1\",{className:\"host-configuration\",children:\"Unfortunatly your ticket was bogey. Thankyou for playing .\"})});}if(this.state.gameFinished&&this.state.type==\"Host\"){return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"h1\",{className:\"host-configuration\",children:\"Game Finished. Thankyou for playing.\"}),/*#__PURE__*/_jsx(\"a\",{href:String(window.location),style:{color:\"white\"},children:/*#__PURE__*/_jsx(\"button\",{children:\"Back\"})})]});}else if(this.state.gameFinished){return/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsx(\"h1\",{className:\"host-configuration\",children:\"Game Finished. Thankyou for playing.\"})});}// If new playerjoins in already started game or host becomes ready (starts the game)\n// this pc is not ready, let him know that he cannot play now in this game\n// if (\n//   this.state.hasGameAlreadyStarted ||\n//   (this.state.readyHost && !this.state.readyClient)\n// ) {\n//   return (\n//     <>\n//       <h1 className=\"host-configuration\">\n//         This game was started without you. You can play in the next game.\n//         Meanwhile you can go back to the home screen and play another game\n//         :)\n//       </h1>\n//       <a href=\"/\" style={{ color: \"white\" }}>\n//         <button>Home</button>\n//       </a>\n//     </>\n//   );\n// }\nvar mainComponent=null;if(this.state.readyHost&&this.state.readyClient){// display player\nmainComponent=/*#__PURE__*/_jsx(Player,{socket:this.props.socket,numHouses:this.state.numHouses,name:this.props.name,emp_code:this.props.emp_code,type:this.state.type,awards:this.state.awards,runWalkthrough:this.state.runWalkthrough});}else if(this.state.type===\"Host\"){// form for host configuration\n//    Choosing Awards\n// pass handleSubmit as a prop\nthis.state.awards[0]={nameAward:\"Users\",numAward:String(this.state.numOfUsers)};mainComponent=/*#__PURE__*/_jsxs(\"div\",{className:\"config-container\",children:[/*#__PURE__*/_jsx(Walkthrough,{playerType:\"Host\",type:\"config\",runWalkthrough:this.state.runWalkthrough}),/*#__PURE__*/_jsx(Toast,{message:\"There are no players in the game right now\",isShown:this.state.isToastOpen,handleClose:function handleClose(){_this3.setState({isToastOpen:false});},initiallyHidden:this.hideToastInitially}),/*#__PURE__*/_jsxs(Modal,{isOpen:this.state.isModalOpen,style:customModalStyles,children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Some players are still not ready.\"}),/*#__PURE__*/_jsx(\"h3\",{children:\"Are you sure you want to start the game?\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"modal-buttons\",children:[/*#__PURE__*/_jsx(\"button\",{onClick:this.handlleHostConfigDone,children:\"Yes\"}),/*#__PURE__*/_jsx(\"button\",{onClick:function onClick(){_this3.setState({isModalOpen:false});},children:\"No\"})]})]}),/*#__PURE__*/_jsx(\"h1\",{className:\"host-configuration\",children:\"Game Setup\"}),/*#__PURE__*/_jsx(\"hr\",{}),/*#__PURE__*/_jsx(ConfigTable,{awards:this.state.awards,handleChangeHost:this.handleChangeHost,handleAddRow:this.handleAddRow,handleRemoveRow:this.handleRemoveRow,handleRemoveSpecificRow:this.handleRemoveSpecificRow,handleSubmit:this.handleSubmit})]});}else if(this.state.type===\"PC\"){// form for PC configuration\n//    Number of Tickets\nmainComponent=/*#__PURE__*/_jsxs(\"div\",{className:\"config-container\",children:[/*#__PURE__*/_jsx(Walkthrough,{playerType:\"PC\",type:\"config\",runWalkthrough:this.state.runWalkthrough}),/*#__PURE__*/_jsx(\"h1\",{className:\"pc-configuration\",children:\"Player Setup\"}),/*#__PURE__*/_jsx(\"hr\",{}),/*#__PURE__*/_jsx(\"form\",{onSubmit:this.handleSubmit,children:/*#__PURE__*/_jsx(\"table\",{className:\"config-table\",id:\"pc-config-table\",children:/*#__PURE__*/_jsxs(\"tbody\",{children:[/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"td\",{className:\"number-tickets\",children:\"Number of Users:\"}),/*#__PURE__*/_jsx(\"td\",{children:/*#__PURE__*/_jsx(\"input\",{type:\"number\",max:\"1\",min:\"1\",disabled:true,value:String(this.state.numOfUsers),onChange:this.handleChangePC,required:true})})]}),/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"td\",{children:\"Waiting for host to start the game\"}),/*#__PURE__*/_jsx(\"td\",{})]})]})})})]});}return/*#__PURE__*/_jsx(_Fragment,{children:mainComponent});}}]);return Config;}(Component);export default Config;","map":{"version":3,"sources":["/Users/ashish/Documents/tambola2/frontend/src/components/Config.tsx"],"names":["React","Component","ConfigTable","Player","Walkthrough","Modal","Toast","axios","customModalStyles","content","top","left","right","bottom","marginRight","transform","backgroundColor","overlay","transition","Config","props","hideToastInitially","handlleHostConfigDone","state","isModalOpen","setState","socket","emit","awards","console","log","handleChangeHost","idx","e","eTarget","target","name","value","handleAddRow","item","nameAward","numAward","handleRemoveRow","slice","handleRemoveSpecificRow","splice","handleChangePC","event","type","numHouses","handleSubmit","readyClient","numOfUsers","isEveryOneReady","i","PcsStatus","length","ready","isToastOpen","preventDefault","userName","emp_code","readyHost","gameFinished","watchTutorialModal","runWalkthrough","hasGameAlreadyStarted","calledWinWithBogeyTicket","hostDisconnected","roomID","window","location","pathname","substr","lastIndexOf","queryParams","URLSearchParams","search","get","method","url","headers","data","then","result","catch","error","message","room","username","on","roomSize","playerTypeObj","user","newPcStatus","numTickets","push","id","resultsObj","calledWinUsername","calledWinUserEmpCode","disconnect","award","callWinType","userHost","String","color","mainComponent"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport { Component } from \"react\";\nimport ConfigTable from \"./ConfigTable\";\nimport Player from \"./Player\";\nimport ReadyPlayers from \"./ReadyPlayers\";\nimport Snackbar from \"./Snackbar\";\nimport Walkthrough from \"./Walkthrough\";\nimport Modal from \"react-modal\";\nimport Toast from \"./Toast\";\nimport axios from 'axios';\nimport { resultObj} from \"./Player\";\n\n\nconst customModalStyles = {\n  content: {\n    top: \"50%\",\n    left: \"50%\",\n    right: \"auto\",\n    bottom: \"auto\",\n    marginRight: \"-50%\",\n    transform: \"translate(-50%, -50%)\",\n    backgroundColor: \"#0e141f\",\n  },\n  overlay: {\n    backgroundColor: \"rgba(255, 255, 255, 0.35)\",\n    transition: \"all 1s\",\n  },\n};\n\nexport interface Award {\n  // Actual type information:\n  // {\n  //    nameAward: string;\n  //    numAward: string;\n  // }\n  [index: string]: string;\n}\n\nexport interface PcStatus {\n  user: User;\n  ready: boolean;\n  numTickets: number;\n}\n\nexport interface User {\n  username: string;\n  id: string;\n  room: string;\n  emp_code:string;\n}\n\ninterface ConfigProps {\n  socket: any;\n  name: string;\n  emp_code:string;\n  \n}\n\ninterface ConfigState {\n  type: string;\n\n  // Config\n  readyHost: boolean;\n  readyClient: boolean;\n\n  //  Host Config State options\n  awards: Award[];\n\n  //  PC Config State options\n  numHouses: number;\n\n  numOfUsers:Number;\n\n  // List of players who are ready to play\n  PcsStatus: PcStatus[];\n\n  // notification for host disconnected\n  hostDisconnected: boolean;\n\n  userName:String;\n  emp_code:String;\n  calledWinWithBogeyTicket:boolean;\n\n  gameFinished :boolean;\n\n  // For warning modal which opens when host hits start game if some player is not ready\n  isModalOpen: boolean;\n\n  // When host tries to start game when there is no one in the game room\n  isToastOpen: boolean;\n\n  // when arrive on host screen, ask the user if they want to see tutorial or not\n  watchTutorialModal: boolean\n\n  // passed to child components to let them know if user selected to watch the tutorial or not\n  runWalkthrough: boolean\n  //\n  hasGameAlreadyStarted: boolean;\n}\n\nclass Config extends Component<ConfigProps, ConfigState> {\n  // For the toast component to hide initially and not add animation on initial render\n  hideToastInitially: boolean;\n  constructor(props: ConfigProps) {\n    super(props);\n    this.state = {\n      type: \"PC\",\n      numHouses: 1,\n       numOfUsers:0,\n       userName:\"\",\n       emp_code:\"\",\n      readyHost: false,\n      readyClient: true,\n      gameFinished:false,\n      PcsStatus: [],\n      isModalOpen: false,\n      isToastOpen: false,\n      watchTutorialModal: true,\n      runWalkthrough: false,\n      hasGameAlreadyStarted: false,\n      calledWinWithBogeyTicket:false,\n      awards: [\n        {\n          nameAward: \"Users\",\n          numAward: \"1\",\n        },\n        {\n          nameAward: \"First Line\",\n          numAward: \"1\",\n        },\n        {\n          nameAward: \"Second Line\",\n          numAward: \"1\",\n        },\n        {\n          nameAward: \"Third Line\",\n          numAward: \"1\",\n        },\n        {\n          nameAward: \"Corners\",\n          numAward: \"1\",\n        },\n        {\n          nameAward: \"Full House\",\n          numAward: \"1\",\n        },\n      ],\n      hostDisconnected: false,\n    };\n    this.hideToastInitially = true;\n  }\n\n  // Only handles on host's config when he presses start game button.\n  handlleHostConfigDone = () => {\n    if (this.state.isModalOpen) {\n      this.setState({ isModalOpen: false });\n    }\n    this.props.socket.emit(\"HostConfigDone\", this.state.awards);\n    console.log(\"config submitted from host\", this.state.awards);\n  };\n\n  componentDidMount() {\n    // Extracting roomID from the URL\n    let roomID = window.location.pathname.substr(\n      window.location.pathname.lastIndexOf(\"/\") + 1\n    );\n\n    const queryParams = new URLSearchParams(window.location.search);\n      const type = queryParams.get('type') as string;\n      \n      this.setState({\n        type: type, // pass this type to player as well\n      });\n\n      if(type == \"PC\")\n      {\n       console.log(\"emp_code: \" + this.props.emp_code)\n          axios({\n            method: 'post',\n            url: 'https://techkilla.com/tambola/tambola_users.php',\n            headers: { 'content-type': 'application/json' },\n            data: {name:this.props.name,emp_code:this.props.emp_code}\n          })\n            .then(result => {\n              console.log(\"result: \" + result.data);\n            })\n            .catch(error => console.log(error.message));\n    \n      }\n\n    // asking server to join room\n    this.props.socket.emit(\"joinRoom\", {\n      room: roomID,\n      username: this.props.name,\n      emp_code: this.props.emp_code,\n    });\n\n    // check if the game has already started or not\n    this.props.socket.on(\"gameHasAlreadyStarted\", () => {\n      this.setState({ hasGameAlreadyStarted: true });\n    });\n\n    this.props.socket.on('numOfUsers',(roomSize:Number)=>{\n        this.setState({numOfUsers:roomSize})\n    })\n\n    \n\n    // server response: player gets know if he is host or pc\n    this.props.socket.on(\"userConnected\", (playerTypeObj: any) => {\n      \n\n      // Receiving event on Host from new PC who has joined and sending them\n      // the list of readyPlayers\n      if (playerTypeObj.type === \"Host\") {\n        this.props.socket.on(\"notifyHostConnection\", (user: User) => {\n          let PcsStatus = this.state.PcsStatus;\n          let newPcStatus: PcStatus = {\n            user: user,\n            ready: false,\n            numTickets: 0,\n          };\n          PcsStatus.push(newPcStatus);\n          this.setState({ PcsStatus: PcsStatus });\n          this.props.socket.emit(\"PcsStatus\", user, PcsStatus);\n        });\n\n       \n\n        this.props.socket.on(\"PcReady\", (user: User, numTickets: number) => {\n          // Find user in array and make him ready\n          let PcsStatus = this.state.PcsStatus;\n          for (let i = 0; i < PcsStatus.length; ++i) {\n            if (PcsStatus[i].user.id === user.id) {\n              PcsStatus[i].ready = true;\n              PcsStatus[i].numTickets = numTickets;\n            }\n          }\n          this.setState({ PcsStatus: PcsStatus });\n          this.props.socket.emit(\"PcsStatus\", user, PcsStatus);\n        });\n\n        this.props.socket.on(\"userDisconnect\", (user: User) => {\n          // dealing with ready/not ready\n          let PcsStatus = this.state.PcsStatus;\n          for (let i = 0; i < PcsStatus.length; ++i) {\n            if (PcsStatus[i].user.id === user.id) {\n              // Remove this user from PcsStatus\n              PcsStatus.splice(i, 1);\n            }\n          }\n          this.setState({ PcsStatus: PcsStatus });\n          this.props.socket.emit(\"PcsStatus\", user, PcsStatus);\n        });\n      }\n    });\n\n    // server sending awards from Host as Host is ready\n    this.props.socket.on(\"HostConfigDone\", (awards: any) => {\n      this.setState({\n        awards: awards,\n        readyHost: true,\n      });\n    });\n\n    this.props.socket.on(\"resultsForPC\", (resultsObj: resultObj) => {\n        if(this.props.name == resultsObj.calledWinUsername && this.props.emp_code == resultsObj.calledWinUserEmpCode)\n        {\n          if (resultsObj.result === \"Bogey!\") {\n            this.props.socket.disconnect();\n            this.setState({\n              calledWinWithBogeyTicket:true\n            })\n          }else\n          {\n            console.log(\"emp_code winning: \" + this.props.emp_code)\n\n            axios({\n              method: 'post',\n              url: 'https://techkilla.com/tambola/tambola_result.php',\n              headers: { 'content-type': 'application/json' },\n              data: {name:resultsObj.calledWinUsername,emp_code:resultsObj.calledWinUserEmpCode,award:resultsObj.callWinType}\n            })\n              .then(result => {\n                console.log(\"result: \" + result.data);\n              })\n              .catch(error => console.log(error.message));\n            \n          }//\n        }\n    });\n\n    // Know the status of all the players if someone new joined or got ready\n    this.props.socket.on(\"PcsStatus\", (PcsStatus: PcStatus[]) => {\n      this.setState({ PcsStatus: PcsStatus });\n    });\n\n    // Host disconnect\n    this.props.socket.on(\"HostDisconnected\", (userHost: User) => {\n      console.log(userHost, \": host disconnected\");\n      this.setState({\n        hostDisconnected: true,\n      });\n      this.props.socket.disconnect();\n    });\n\n    this.props.socket.on(\"GameFinished\", () => {\n      console.log(\"Game Finished\");\n      if(this.state.type == \"PC\")\n          this.props.socket.disconnect();\n          \n      this.setState({\n        gameFinished:true,\n      });\n    });\n\n    \n  }\n\n  // For Host Config\n  handleChangeHost = (idx: number) => (e: any) => {\n    const eTarget = e.target;\n    let name: string = eTarget.name;\n    let value: string = eTarget.value;\n\n    const awards = this.state.awards;\n\n    awards[idx][name] = value;\n\n    this.setState({\n      awards,\n    });\n  };\n  handleAddRow = () => {\n    const item = {\n      nameAward: \"\",\n      numAward: \"\",\n    };\n    this.setState({\n      awards: [...this.state.awards, item],\n    });\n  };\n  handleRemoveRow = () => {\n    this.setState({\n      awards: this.state.awards.slice(0, -1),\n    });\n  };\n  handleRemoveSpecificRow = (idx: number) => () => {\n    const awards = [...this.state.awards];\n    awards.splice(idx, 1);\n    this.setState({ awards });\n  };\n\n  // For PC Config\n  handleChangePC = (event: any) => {\n    const { value } = event.target;\n    if (this.state.type === \"PC\") {\n      // sanity check\n      this.setState({\n        numHouses: value,\n      });\n    }\n  };\n\n  // common function for Host and PC Config\n  handleSubmit = (event: any) => {\n    this.setState({\n      readyClient: true,\n    });\n    if (this.state.type === \"Host\") {\n      // start the game only when there are actual players in the game\n      if (this.state.numOfUsers > 0) {\n        // checking if all the players are ready\n        let isEveryOneReady = true;\n        for (let i = 0; i < this.state.PcsStatus.length; ++i) {\n          if (!this.state.PcsStatus[i].ready) {\n            isEveryOneReady = true;\n            continue;\n          }\n        }\n        if (isEveryOneReady) {\n          this.handlleHostConfigDone();\n        } else {\n          this.setState({ isModalOpen: true });\n        }\n      } else {\n        // To make the toast visible\n        this.hideToastInitially = false;\n        this.setState({ isToastOpen: true });\n      }\n    } else if (this.state.type === \"PC\") {\n      //let everyone know that i am ready. Backend knows who I am by socket.id\n      this.props.socket.emit(\"PcReady\", this.state.numHouses);\n    }\n    event.preventDefault();\n  };\n\n  render() {\n    // game is over if there is no host\n    if (this.state.hostDisconnected) {\n      return (\n        <>\n          <h1 className=\"host-configuration\">\n            Host left the game. Please close this tab. Generate a new room if\n            you want to play more.\n          </h1>\n          <a href={String(window.location)} style={{ color: \"white\" }}>\n            <button>Back</button>\n          </a>\n        </>\n      );\n    }\n\n    if (this.state.calledWinWithBogeyTicket) {\n      return (\n        <>\n          <h1 className=\"host-configuration\">\n             Unfortunatly your ticket was bogey. Thankyou for playing .\n          </h1>\n        </>\n      );\n    }\n\n    if (this.state.gameFinished && this.state.type == \"Host\") {\n      return (\n        <>\n          <h1 className=\"host-configuration\">\n            Game Finished. Thankyou for playing.\n          </h1>\n          <a href={String(window.location)} style={{ color: \"white\" }}>\n           \n            <button>Back</button>\n          </a>\n        </>\n      );\n    }else if(this.state.gameFinished)\n    {\n      return (\n        <>\n          <h1 className=\"host-configuration\">\n            Game Finished. Thankyou for playing.\n          </h1>\n        </>\n      );\n    }\n\n    // If new playerjoins in already started game or host becomes ready (starts the game)\n    // this pc is not ready, let him know that he cannot play now in this game\n    // if (\n    //   this.state.hasGameAlreadyStarted ||\n    //   (this.state.readyHost && !this.state.readyClient)\n    // ) {\n    //   return (\n    //     <>\n    //       <h1 className=\"host-configuration\">\n    //         This game was started without you. You can play in the next game.\n    //         Meanwhile you can go back to the home screen and play another game\n    //         :)\n    //       </h1>\n    //       <a href=\"/\" style={{ color: \"white\" }}>\n    //         <button>Home</button>\n    //       </a>\n    //     </>\n    //   );\n    // }\n\n    let mainComponent = null;\n    if (this.state.readyHost && this.state.readyClient) {\n      // display player\n      mainComponent = (\n        <Player\n          socket={this.props.socket}\n          numHouses={this.state.numHouses}\n          name={this.props.name}\n          emp_code = {this.props.emp_code}\n          type={this.state.type}\n          awards={this.state.awards}\n          runWalkthrough={this.state.runWalkthrough}\n        />\n      );\n    } else if (this.state.type === \"Host\") {\n      // form for host configuration\n      //    Choosing Awards\n      // pass handleSubmit as a prop\n      this.state.awards[0] = {nameAward:\"Users\",numAward:String(this.state.numOfUsers)};\n      mainComponent = (\n        <div className=\"config-container\">\n          <Walkthrough playerType=\"Host\" type=\"config\" runWalkthrough={this.state.runWalkthrough}/>\n          {/* <Snackbar\n            message=\"Share this 'join link' with other players\"\n            actionText=\"Copy Link\"\n          /> */}\n          <Toast\n            message={\"There are no players in the game right now\"}\n            isShown={this.state.isToastOpen}\n            handleClose={() => {\n              this.setState({ isToastOpen: false });\n            }}\n            initiallyHidden={this.hideToastInitially}\n          />\n          <Modal isOpen={this.state.isModalOpen} style={customModalStyles}>\n            <h3>Some players are still not ready.</h3>\n            <h3>Are you sure you want to start the game?</h3>\n            <div className=\"modal-buttons\">\n              <button onClick={this.handlleHostConfigDone}>Yes</button>\n              <button\n                onClick={() => {\n                  this.setState({ isModalOpen: false });\n                }}\n              >\n                No\n              </button>\n            </div>\n          </Modal>\n          <h1 className=\"host-configuration\">Game Setup</h1>\n          <hr />\n          \n          <ConfigTable\n            awards={this.state.awards}\n            handleChangeHost={this.handleChangeHost}\n            handleAddRow={this.handleAddRow}\n            handleRemoveRow={this.handleRemoveRow}\n            handleRemoveSpecificRow={this.handleRemoveSpecificRow}\n            handleSubmit={this.handleSubmit}\n          />\n         \n        </div>\n      );\n    } else if (this.state.type === \"PC\") {\n      // form for PC configuration\n      //    Number of Tickets\n      mainComponent = (\n        <div className=\"config-container\">\n          <Walkthrough playerType=\"PC\" type=\"config\" runWalkthrough={this.state.runWalkthrough}/>\n          <h1 className=\"pc-configuration\">Player Setup</h1>\n          <hr />\n          <form onSubmit={this.handleSubmit}>\n            <table className=\"config-table\" id=\"pc-config-table\">\n              <tbody>\n                <tr>\n                  <td className=\"number-tickets\">Number of Users:</td>\n                  <td>\n                    <input\n                      type=\"number\"\n                      max=\"1\"\n                      min=\"1\"\n                      disabled\n                      value={String(this.state.numOfUsers)}\n                      onChange={this.handleChangePC}\n                      required\n                    />\n                  </td>\n                </tr>\n                <tr>\n                  <td>Waiting for host to start the game</td>\n                  <td>\n                  \n                  </td>\n                </tr>\n              </tbody>\n            </table>\n          </form>\n         \n        </div>\n      );\n    }\n    return (\n      <>\n        {mainComponent}\n       \n      </>\n    );\n  }\n}\n\nexport default Config;\n"]},"metadata":{},"sourceType":"module"}