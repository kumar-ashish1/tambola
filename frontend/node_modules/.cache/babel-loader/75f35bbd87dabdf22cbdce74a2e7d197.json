{"ast":null,"code":"import _toConsumableArray from\"/Users/ashish/Documents/tambola3/tambola/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _classCallCheck from\"/Users/ashish/Documents/tambola3/tambola/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";import _createClass from\"/Users/ashish/Documents/tambola3/tambola/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";import _inherits from\"/Users/ashish/Documents/tambola3/tambola/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";import _createSuper from\"/Users/ashish/Documents/tambola3/tambola/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";import*as React from\"react\";import{Component}from\"react\";import ConfigTable from\"./ConfigTable\";import Player from\"./Player\";import Walkthrough from\"./Walkthrough\";import Toast from\"./Toast\";import axios from'axios';import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var customModalStyles={content:{top:\"50%\",left:\"50%\",right:\"auto\",bottom:\"auto\",marginRight:\"-50%\",transform:\"translate(-50%, -50%)\",backgroundColor:\"#0e141f\"},overlay:{backgroundColor:\"rgba(255, 255, 255, 0.35)\",transition:\"all 1s\"}};var Config=/*#__PURE__*/function(_Component){_inherits(Config,_Component);var _super=_createSuper(Config);function Config(props){var _this;_classCallCheck(this,Config);_this=_super.call(this,props);// For the toast component to hide initially and not add animation on initial render\n_this.hideToastInitially=void 0;// Only handles on host's config when he presses start game button.\n_this.handlleHostConfigDone=function(){if(_this.state.isModalOpen){_this.setState({isModalOpen:false});}_this.props.socket.emit(\"HostConfigDone\",_this.state.awards);console.log(\"config submitted from host\",_this.state.awards);};// For Host Config\n_this.handleChangeHost=function(idx){return function(e){var eTarget=e.target;var name=eTarget.name;var value=eTarget.value;var awards=_this.state.awards;awards[idx][name]=value;_this.setState({awards:awards});};};_this.handleAddRow=function(){var item={nameAward:\"\",numAward:\"\"};_this.setState({awards:[].concat(_toConsumableArray(_this.state.awards),[item])});};_this.handleRemoveRow=function(){_this.setState({awards:_this.state.awards.slice(0,-1)});};_this.handleRemoveSpecificRow=function(idx){return function(){var awards=_toConsumableArray(_this.state.awards);awards.splice(idx,1);_this.setState({awards:awards});};};// For PC Config\n_this.handleChangePC=function(event){var value=event.target.value;if(_this.state.type===\"PC\"){// sanity check\n_this.setState({numHouses:value});}};// common function for Host and PC Config\n_this.handleSubmit=function(event){_this.setState({readyClient:true});if(_this.state.type===\"Host\"){// start the game only when there are actual players in the game\nif(_this.state.numOfUsers>0){// checking if all the players are ready\nvar isEveryOneReady=true;for(var i=0;i<_this.state.PcsStatus.length;++i){if(!_this.state.PcsStatus[i].ready){isEveryOneReady=true;continue;}}if(isEveryOneReady){_this.handlleHostConfigDone();}else{_this.setState({isModalOpen:true});}}else{// To make the toast visible\n_this.hideToastInitially=false;_this.setState({isToastOpen:true});}}else if(_this.state.type===\"PC\"){//let everyone know that i am ready. Backend knows who I am by socket.id\n_this.props.socket.emit(\"PcReady\",_this.state.numHouses);}event.preventDefault();};_this.state={type:\"PC\",numHouses:1,numOfUsers:0,userName:\"\",emp_code:\"\",readyHost:false,readyClient:true,gameFinished:false,PcsStatus:[],isModalOpen:false,isToastOpen:false,watchTutorialModal:true,runWalkthrough:false,hasGameAlreadyStarted:false,calledWinWithBogeyTicket:false,awards:[{nameAward:\"Users\",numAward:\"1\"},{nameAward:\"First Line\",numAward:\"1\"},{nameAward:\"Second Line\",numAward:\"1\"},{nameAward:\"Third Line\",numAward:\"1\"},{nameAward:\"Corners\",numAward:\"1\"},{nameAward:\"Full House\",numAward:\"1\"}],hostDisconnected:false};_this.hideToastInitially=true;return _this;}_createClass(Config,[{key:\"componentDidMount\",value:function componentDidMount(){var _this2=this;// Extracting roomID from the URL\nvar roomID=window.location.pathname.substr(window.location.pathname.lastIndexOf(\"/\")+1);var queryParams=new URLSearchParams(window.location.search);var type=queryParams.get('type');this.setState({type:type// pass this type to player as well\n});if(type==\"PC\"){console.log(\"emp_code: \"+this.props.emp_code);axios({method:'post',url:'https://techkilla.com/tambola/tambola_users.php',headers:{'content-type':'application/json'},data:{name:this.props.name,emp_code:this.props.emp_code}}).then(function(result){console.log(\"result: \"+result.data);}).catch(function(error){return console.log(error.message);});}// asking server to join room\nthis.props.socket.emit(\"joinRoom\",{room:roomID,username:this.props.name,emp_code:this.props.emp_code});// check if the game has already started or not\nthis.props.socket.on(\"gameHasAlreadyStarted\",function(){_this2.setState({hasGameAlreadyStarted:true});});this.props.socket.on('numOfUsers',function(roomSize){_this2.setState({numOfUsers:roomSize});});// server response: player gets know if he is host or pc\nthis.props.socket.on(\"userConnected\",function(playerTypeObj){// Receiving event on Host from new PC who has joined and sending them\n// the list of readyPlayers\nif(playerTypeObj.type===\"Host\"){_this2.props.socket.on(\"notifyHostConnection\",function(user){var PcsStatus=_this2.state.PcsStatus;var newPcStatus={user:user,ready:false,numTickets:0};PcsStatus.push(newPcStatus);_this2.setState({PcsStatus:PcsStatus});_this2.props.socket.emit(\"PcsStatus\",user,PcsStatus);});_this2.props.socket.on(\"PcReady\",function(user,numTickets){// Find user in array and make him ready\nvar PcsStatus=_this2.state.PcsStatus;for(var i=0;i<PcsStatus.length;++i){if(PcsStatus[i].user.id===user.id){PcsStatus[i].ready=true;PcsStatus[i].numTickets=numTickets;}}_this2.setState({PcsStatus:PcsStatus});_this2.props.socket.emit(\"PcsStatus\",user,PcsStatus);});_this2.props.socket.on(\"userDisconnect\",function(user){// dealing with ready/not ready\nvar PcsStatus=_this2.state.PcsStatus;for(var i=0;i<PcsStatus.length;++i){if(PcsStatus[i].user.id===user.id){// Remove this user from PcsStatus\nPcsStatus.splice(i,1);}}_this2.setState({PcsStatus:PcsStatus});_this2.props.socket.emit(\"PcsStatus\",user,PcsStatus);});}});// server sending awards from Host as Host is ready\nthis.props.socket.on(\"HostConfigDone\",function(awards){_this2.setState({awards:awards,readyHost:true});});this.props.socket.on(\"resultsForPC\",function(resultsObj){if(_this2.props.name==resultsObj.calledWinUsername&&_this2.props.emp_code==resultsObj.calledWinUserEmpCode){if(resultsObj.result===\"Bogey!\"){_this2.props.socket.disconnect();_this2.setState({calledWinWithBogeyTicket:true});}else{console.log(\"emp_code winning: \"+_this2.props.emp_code);axios({method:'post',url:'https://techkilla.com/tambola/tambola_result.php',headers:{'content-type':'application/json'},data:{name:resultsObj.calledWinUsername,emp_code:resultsObj.calledWinUserEmpCode,award:resultsObj.callWinType}}).then(function(result){console.log(\"result: \"+result.data);}).catch(function(error){return console.log(error.message);});}//\n}});// Know the status of all the players if someone new joined or got ready\nthis.props.socket.on(\"PcsStatus\",function(PcsStatus){_this2.setState({PcsStatus:PcsStatus});});// Host disconnect\nthis.props.socket.on(\"HostDisconnected\",function(userHost){console.log(userHost,\": host disconnected\");_this2.setState({hostDisconnected:true});_this2.props.socket.disconnect();});this.props.socket.on(\"GameFinished\",function(){console.log(\"Game Finished\");if(_this2.state.type==\"PC\")_this2.props.socket.disconnect();_this2.setState({gameFinished:true});});}},{key:\"render\",value:function render(){var _this3=this;// game is over if there is no host\nif(this.state.hostDisconnected){return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"h1\",{className:\"host-configuration\",children:\"Host left the game. Please close this tab. Generate a new room if you want to play more.\"}),/*#__PURE__*/_jsx(\"a\",{href:String(window.location),style:{color:\"white\"},children:/*#__PURE__*/_jsx(\"button\",{children:\"Back\"})})]});}if(this.state.calledWinWithBogeyTicket){return/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsx(\"h1\",{className:\"host-configuration\",children:\"Unfortunatly your ticket was bogey. Thankyou for playing .\"})});}if(this.state.gameFinished&&this.state.type==\"Host\"){return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"h1\",{className:\"host-configuration\",children:\"Game Finished. Thankyou for playing.\"}),/*#__PURE__*/_jsx(\"a\",{href:String(window.location),style:{color:\"white\"},children:/*#__PURE__*/_jsx(\"button\",{children:\"Back\"})})]});}else if(this.state.gameFinished){return/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsx(\"h1\",{className:\"host-configuration\",children:\"Game Finished. Thankyou for playing.\"})});}// If new playerjoins in already started game or host becomes ready (starts the game)\n// this pc is not ready, let him know that he cannot play now in this game\n// if (\n//   this.state.hasGameAlreadyStarted ||\n//   (this.state.readyHost && !this.state.readyClient)\n// ) {\n//   return (\n//     <>\n//       <h1 className=\"host-configuration\">\n//         This game was started without you. You can play in the next game.\n//         Meanwhile you can go back to the home screen and play another game\n//         :)\n//       </h1>\n//       <a href=\"/\" style={{ color: \"white\" }}>\n//         <button>Home</button>\n//       </a>\n//     </>\n//   );\n// }\nvar mainComponent=null;if(this.state.readyHost&&this.state.readyClient){// display player\nmainComponent=/*#__PURE__*/_jsx(Player,{socket:this.props.socket,numHouses:this.state.numHouses,name:this.props.name,emp_code:this.props.emp_code,type:this.state.type,awards:this.state.awards,runWalkthrough:this.state.runWalkthrough});}else if(this.state.type===\"Host\"){// form for host configuration\n//    Choosing Awards\n// pass handleSubmit as a prop\nthis.state.awards[0]={nameAward:\"Users\",numAward:String(this.state.numOfUsers)};mainComponent=/*#__PURE__*/_jsxs(\"div\",{className:\"config-container\",children:[/*#__PURE__*/_jsx(Walkthrough,{playerType:\"Host\",type:\"config\",runWalkthrough:this.state.runWalkthrough}),/*#__PURE__*/_jsx(Toast,{message:\"There are no players in the game right now\",isShown:this.state.isToastOpen,handleClose:function handleClose(){_this3.setState({isToastOpen:false});},initiallyHidden:this.hideToastInitially}),/*#__PURE__*/_jsx(\"h1\",{className:\"host-configuration\",children:\"Game Setup\"}),/*#__PURE__*/_jsx(\"hr\",{}),/*#__PURE__*/_jsx(ConfigTable,{awards:this.state.awards,handleChangeHost:this.handleChangeHost,handleAddRow:this.handleAddRow,handleRemoveRow:this.handleRemoveRow,handleRemoveSpecificRow:this.handleRemoveSpecificRow,handleSubmit:this.handleSubmit})]});}else if(this.state.type===\"PC\"){// form for PC configuration\n//    Number of Tickets\nmainComponent=/*#__PURE__*/_jsxs(\"div\",{className:\"config-container\",children:[/*#__PURE__*/_jsx(Walkthrough,{playerType:\"PC\",type:\"config\",runWalkthrough:this.state.runWalkthrough}),/*#__PURE__*/_jsx(\"h1\",{className:\"pc-configuration\",children:\"Player Setup\"}),/*#__PURE__*/_jsx(\"hr\",{}),/*#__PURE__*/_jsx(\"form\",{onSubmit:this.handleSubmit,children:/*#__PURE__*/_jsx(\"table\",{className:\"config-table\",id:\"pc-config-table\",children:/*#__PURE__*/_jsxs(\"tbody\",{children:[/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"td\",{className:\"number-tickets\",children:\"Number of Users:\"}),/*#__PURE__*/_jsx(\"td\",{children:/*#__PURE__*/_jsx(\"input\",{type:\"number\",max:\"6\",min:\"1\",disabled:true,value:String(this.state.numOfUsers),onChange:this.handleChangePC,required:true})})]}),/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"td\",{children:\"Waiting for host to start the game\"}),/*#__PURE__*/_jsx(\"td\",{})]})]})})})]});}return/*#__PURE__*/_jsx(_Fragment,{children:mainComponent});}}]);return Config;}(Component);export default Config;","map":{"version":3,"names":["React","Component","ConfigTable","Player","Walkthrough","Toast","axios","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","customModalStyles","content","top","left","right","bottom","marginRight","transform","backgroundColor","overlay","transition","Config","_Component","_inherits","_super","_createSuper","props","_this","_classCallCheck","call","hideToastInitially","handlleHostConfigDone","state","isModalOpen","setState","socket","emit","awards","console","log","handleChangeHost","idx","e","eTarget","target","name","value","handleAddRow","item","nameAward","numAward","concat","_toConsumableArray","handleRemoveRow","slice","handleRemoveSpecificRow","splice","handleChangePC","event","type","numHouses","handleSubmit","readyClient","numOfUsers","isEveryOneReady","i","PcsStatus","length","ready","isToastOpen","preventDefault","userName","emp_code","readyHost","gameFinished","watchTutorialModal","runWalkthrough","hasGameAlreadyStarted","calledWinWithBogeyTicket","hostDisconnected","_createClass","key","componentDidMount","_this2","roomID","window","location","pathname","substr","lastIndexOf","queryParams","URLSearchParams","search","get","method","url","headers","data","then","result","catch","error","message","room","username","on","roomSize","playerTypeObj","user","newPcStatus","numTickets","push","id","resultsObj","calledWinUsername","calledWinUserEmpCode","disconnect","award","callWinType","userHost","render","_this3","children","className","href","String","style","color","mainComponent","playerType","isShown","handleClose","initiallyHidden","onSubmit","max","min","disabled","onChange","required"],"sources":["/Users/ashish/Documents/tambola3/tambola/frontend/src/components/Config.tsx"],"sourcesContent":["import * as React from \"react\";\nimport { Component } from \"react\";\nimport ConfigTable from \"./ConfigTable\";\nimport Player from \"./Player\";\nimport ReadyPlayers from \"./ReadyPlayers\";\nimport Snackbar from \"./Snackbar\";\nimport Walkthrough from \"./Walkthrough\";\nimport Modal from \"react-modal\";\nimport Toast from \"./Toast\";\nimport axios from 'axios';\nimport { resultObj} from \"./Player\";\nimport { ComponentType } from 'react';\n\n\n\nconst customModalStyles = {\n  content: {\n    top: \"50%\",\n    left: \"50%\",\n    right: \"auto\",\n    bottom: \"auto\",\n    marginRight: \"-50%\",\n    transform: \"translate(-50%, -50%)\",\n    backgroundColor: \"#0e141f\",\n  },\n  overlay: {\n    backgroundColor: \"rgba(255, 255, 255, 0.35)\",\n    transition: \"all 1s\",\n  },\n};\n\nexport interface Award {\n  // Actual type information:\n  // {\n  //    nameAward: string;\n  //    numAward: string;\n  // }\n  [index: string]: string;\n}\n\nexport interface PcStatus {\n  user: User;\n  ready: boolean;\n  numTickets: number;\n}\n\nexport interface User {\n  username: string;\n  id: string;\n  room: string;\n  emp_code:string;\n}\n\ninterface ConfigProps {\n  socket: any;\n  name: string;\n  emp_code:string;\n  \n}\n\ninterface ConfigState {\n  type: string;\n\n  // Config\n  readyHost: boolean;\n  readyClient: boolean;\n\n  //  Host Config State options\n  awards: Award[];\n\n  //  PC Config State options\n  numHouses: number;\n\n  numOfUsers:number;\n\n  // List of players who are ready to play\n  PcsStatus: PcStatus[];\n\n  // notification for host disconnected\n  hostDisconnected: boolean;\n\n  userName:String;\n  emp_code:String;\n  calledWinWithBogeyTicket:boolean;\n\n  gameFinished :boolean;\n\n  // For warning modal which opens when host hits start game if some player is not ready\n  isModalOpen: boolean;\n\n  // When host tries to start game when there is no one in the game room\n  isToastOpen: boolean;\n\n  // when arrive on host screen, ask the user if they want to see tutorial or not\n  watchTutorialModal: boolean\n\n  // passed to child components to let them know if user selected to watch the tutorial or not\n  runWalkthrough: boolean\n  //\n  hasGameAlreadyStarted: boolean;\n}\n\nclass Config extends Component<ConfigProps, ConfigState> {\n  // For the toast component to hide initially and not add animation on initial render\n  hideToastInitially: boolean;\n  constructor(props: ConfigProps) {\n    super(props);\n    this.state = {\n      type: \"PC\",\n      numHouses: 1,\n       numOfUsers:0,\n       userName:\"\",\n       emp_code:\"\",\n      readyHost: false,\n      readyClient: true,\n      gameFinished:false,\n      PcsStatus: [],\n      isModalOpen: false,\n      isToastOpen: false,\n      watchTutorialModal: true,\n      runWalkthrough: false,\n      hasGameAlreadyStarted: false,\n      calledWinWithBogeyTicket:false,\n      awards: [\n        {\n          nameAward: \"Users\",\n          numAward: \"1\",\n        },\n        {\n          nameAward: \"First Line\",\n          numAward: \"1\",\n        },\n        {\n          nameAward: \"Second Line\",\n          numAward: \"1\",\n        },\n        {\n          nameAward: \"Third Line\",\n          numAward: \"1\",\n        },\n        {\n          nameAward: \"Corners\",\n          numAward: \"1\",\n        },\n        {\n          nameAward: \"Full House\",\n          numAward: \"1\",\n        },\n      ],\n      hostDisconnected: false,\n    };\n    this.hideToastInitially = true;\n  }\n\n  // Only handles on host's config when he presses start game button.\n  handlleHostConfigDone = () => {\n    if (this.state.isModalOpen) {\n      this.setState({ isModalOpen: false });\n    }\n    this.props.socket.emit(\"HostConfigDone\", this.state.awards);\n    console.log(\"config submitted from host\", this.state.awards);\n  };\n\n  componentDidMount() {\n    // Extracting roomID from the URL\n    let roomID = window.location.pathname.substr(\n      window.location.pathname.lastIndexOf(\"/\") + 1\n    );\n\n    const queryParams = new URLSearchParams(window.location.search);\n      const type = queryParams.get('type') as string;\n      \n      this.setState({\n        type: type, // pass this type to player as well\n      });\n\n      if(type == \"PC\")\n      {\n       console.log(\"emp_code: \" + this.props.emp_code)\n          axios({\n            method: 'post',\n            url: 'https://techkilla.com/tambola/tambola_users.php',\n            headers: { 'content-type': 'application/json' },\n            data: {name:this.props.name,emp_code:this.props.emp_code}\n          })\n            .then(result => {\n              console.log(\"result: \" + result.data);\n            })\n            .catch(error => console.log(error.message));\n    \n      }\n\n    // asking server to join room\n    this.props.socket.emit(\"joinRoom\", {\n      room: roomID,\n      username: this.props.name,\n      emp_code: this.props.emp_code,\n    });\n\n    // check if the game has already started or not\n    this.props.socket.on(\"gameHasAlreadyStarted\", () => {\n      this.setState({ hasGameAlreadyStarted: true });\n    });\n\n    this.props.socket.on('numOfUsers',(roomSize:number)=>{\n        this.setState({numOfUsers:roomSize})\n    })\n\n    \n\n    // server response: player gets know if he is host or pc\n    this.props.socket.on(\"userConnected\", (playerTypeObj: any) => {\n      \n\n      // Receiving event on Host from new PC who has joined and sending them\n      // the list of readyPlayers\n      if (playerTypeObj.type === \"Host\") {\n        this.props.socket.on(\"notifyHostConnection\", (user: User) => {\n          let PcsStatus = this.state.PcsStatus;\n          let newPcStatus: PcStatus = {\n            user: user,\n            ready: false,\n            numTickets: 0,\n          };\n          PcsStatus.push(newPcStatus);\n          this.setState({ PcsStatus: PcsStatus });\n          this.props.socket.emit(\"PcsStatus\", user, PcsStatus);\n        });\n\n       \n\n        this.props.socket.on(\"PcReady\", (user: User, numTickets: number) => {\n          // Find user in array and make him ready\n          let PcsStatus = this.state.PcsStatus;\n          for (let i = 0; i < PcsStatus.length; ++i) {\n            if (PcsStatus[i].user.id === user.id) {\n              PcsStatus[i].ready = true;\n              PcsStatus[i].numTickets = numTickets;\n            }\n          }\n          this.setState({ PcsStatus: PcsStatus });\n          this.props.socket.emit(\"PcsStatus\", user, PcsStatus);\n        });\n\n        this.props.socket.on(\"userDisconnect\", (user: User) => {\n          // dealing with ready/not ready\n          let PcsStatus = this.state.PcsStatus;\n          for (let i = 0; i < PcsStatus.length; ++i) {\n            if (PcsStatus[i].user.id === user.id) {\n              // Remove this user from PcsStatus\n              PcsStatus.splice(i, 1);\n            }\n          }\n          this.setState({ PcsStatus: PcsStatus });\n          this.props.socket.emit(\"PcsStatus\", user, PcsStatus);\n        });\n      }\n    });\n\n    // server sending awards from Host as Host is ready\n    this.props.socket.on(\"HostConfigDone\", (awards: any) => {\n      this.setState({\n        awards: awards,\n        readyHost: true,\n      });\n    });\n\n    this.props.socket.on(\"resultsForPC\", (resultsObj: resultObj) => {\n        if(this.props.name == resultsObj.calledWinUsername && this.props.emp_code == resultsObj.calledWinUserEmpCode)\n        {\n          if (resultsObj.result === \"Bogey!\") {\n            this.props.socket.disconnect();\n            this.setState({\n              calledWinWithBogeyTicket:true\n            })\n          }else\n          {\n            console.log(\"emp_code winning: \" + this.props.emp_code)\n\n            axios({\n              method: 'post',\n              url: 'https://techkilla.com/tambola/tambola_result.php',\n              headers: { 'content-type': 'application/json' },\n              data: {name:resultsObj.calledWinUsername,emp_code:resultsObj.calledWinUserEmpCode,award:resultsObj.callWinType}\n            })\n              .then(result => {\n                console.log(\"result: \" + result.data);\n              })\n              .catch(error => console.log(error.message));\n            \n          }//\n        }\n    });\n\n    // Know the status of all the players if someone new joined or got ready\n    this.props.socket.on(\"PcsStatus\", (PcsStatus: PcStatus[]) => {\n      this.setState({ PcsStatus: PcsStatus });\n    });\n\n    // Host disconnect\n    this.props.socket.on(\"HostDisconnected\", (userHost: User) => {\n      console.log(userHost, \": host disconnected\");\n      this.setState({\n        hostDisconnected: true,\n      });\n      this.props.socket.disconnect();\n    });\n\n    this.props.socket.on(\"GameFinished\", () => {\n      console.log(\"Game Finished\");\n      if(this.state.type == \"PC\")\n          this.props.socket.disconnect();\n          \n      this.setState({\n        gameFinished:true,\n      });\n    });\n\n    \n  }\n\n  // For Host Config\n  handleChangeHost = (idx: number) => (e: any) => {\n    const eTarget = e.target;\n    let name: string = eTarget.name;\n    let value: string = eTarget.value;\n\n    const awards = this.state.awards;\n\n    awards[idx][name] = value;\n\n    this.setState({\n      awards,\n    });\n  };\n  handleAddRow = () => {\n    const item = {\n      nameAward: \"\",\n      numAward: \"\",\n    };\n    this.setState({\n      awards: [...this.state.awards, item],\n    });\n  };\n  handleRemoveRow = () => {\n    this.setState({\n      awards: this.state.awards.slice(0, -1),\n    });\n  };\n  handleRemoveSpecificRow = (idx: number) => () => {\n    const awards = [...this.state.awards];\n    awards.splice(idx, 1);\n    this.setState({ awards });\n  };\n\n  // For PC Config\n  handleChangePC = (event: any) => {\n    const { value } = event.target;\n    if (this.state.type === \"PC\") {\n      // sanity check\n      this.setState({\n        numHouses: value,\n      });\n    }\n  };\n\n  // common function for Host and PC Config\n  handleSubmit = (event: any) => {\n    this.setState({\n      readyClient: true,\n    });\n    if (this.state.type === \"Host\") {\n      // start the game only when there are actual players in the game\n      if (this.state.numOfUsers > 0) {\n        // checking if all the players are ready\n        let isEveryOneReady = true;\n        for (let i = 0; i < this.state.PcsStatus.length; ++i) {\n          if (!this.state.PcsStatus[i].ready) {\n            isEveryOneReady = true;\n            continue;\n          }\n        }\n        if (isEveryOneReady) {\n          this.handlleHostConfigDone();\n        } else {\n          this.setState({ isModalOpen: true });\n        }\n      } else {\n        // To make the toast visible\n        this.hideToastInitially = false;\n        this.setState({ isToastOpen: true });\n      }\n    } else if (this.state.type === \"PC\") {\n      //let everyone know that i am ready. Backend knows who I am by socket.id\n      this.props.socket.emit(\"PcReady\", this.state.numHouses);\n    }\n    event.preventDefault();\n  };\n\n  render() {\n    // game is over if there is no host\n    if (this.state.hostDisconnected) {\n      return (\n        <>\n          <h1 className=\"host-configuration\">\n            Host left the game. Please close this tab. Generate a new room if\n            you want to play more.\n          </h1>\n          <a href={String(window.location)} style={{ color: \"white\" }}>\n            <button>Back</button>\n          </a>\n        </>\n      );\n    }\n\n    if (this.state.calledWinWithBogeyTicket) {\n      return (\n        <>\n          <h1 className=\"host-configuration\">\n             Unfortunatly your ticket was bogey. Thankyou for playing .\n          </h1>\n        </>\n      );\n    }\n\n    if (this.state.gameFinished && this.state.type == \"Host\") {\n      return (\n        <>\n          <h1 className=\"host-configuration\">\n            Game Finished. Thankyou for playing.\n          </h1>\n          <a href={String(window.location)} style={{ color: \"white\" }}>\n           \n            <button>Back</button>\n          </a>\n        </>\n      );\n    }else if(this.state.gameFinished)\n    {\n      return (\n        <>\n          <h1 className=\"host-configuration\">\n            Game Finished. Thankyou for playing.\n          </h1>\n        </>\n      );\n    }\n\n    // If new playerjoins in already started game or host becomes ready (starts the game)\n    // this pc is not ready, let him know that he cannot play now in this game\n    // if (\n    //   this.state.hasGameAlreadyStarted ||\n    //   (this.state.readyHost && !this.state.readyClient)\n    // ) {\n    //   return (\n    //     <>\n    //       <h1 className=\"host-configuration\">\n    //         This game was started without you. You can play in the next game.\n    //         Meanwhile you can go back to the home screen and play another game\n    //         :)\n    //       </h1>\n    //       <a href=\"/\" style={{ color: \"white\" }}>\n    //         <button>Home</button>\n    //       </a>\n    //     </>\n    //   );\n    // }\n\n    let mainComponent = null;\n    if (this.state.readyHost && this.state.readyClient) {\n      // display player\n      mainComponent = (\n        <Player\n          socket={this.props.socket}\n          numHouses={this.state.numHouses}\n          name={this.props.name}\n          emp_code = {this.props.emp_code}\n          type={this.state.type}\n          awards={this.state.awards}\n          runWalkthrough={this.state.runWalkthrough}\n        />\n      );\n    } else if (this.state.type === \"Host\") {\n      // form for host configuration\n      //    Choosing Awards\n      // pass handleSubmit as a prop\n      this.state.awards[0] = {nameAward:\"Users\",numAward:String(this.state.numOfUsers)};\n      mainComponent = (\n        <div className=\"config-container\">\n          <Walkthrough playerType=\"Host\" type=\"config\" runWalkthrough={this.state.runWalkthrough}/>\n          {/* <SnackbarIts instance type 'ReactModal' is not a valid JSX element.\n            message=\"Share this 'join link' with other players\"\n            actionText=\"Copy Link\"\n          /> */}\n          <Toast\n            message={\"There are no players in the game right now\"}\n            isShown={this.state.isToastOpen}\n            handleClose={() => {\n              this.setState({ isToastOpen: false });\n            }}\n            initiallyHidden={this.hideToastInitially}\n          />\n          {/* <Modal isOpen={this.state.isModalOpen} style={customModalStyles}>\n            <h3>Some players are still not ready.</h3>\n            <h3>Are you sure you want to start the game?</h3>\n            <div className=\"modal-buttons\">\n              <button onClick={this.handlleHostConfigDone}>Yes</button>\n              <button\n                onClick={() => {\n                  this.setState({ isModalOpen: false });\n                }}\n              >\n                No\n              </button>\n            </div>\n          </Modal> */}\n          <h1 className=\"host-configuration\">Game Setup</h1>\n          <hr />\n          \n          <ConfigTable\n            awards={this.state.awards}\n            handleChangeHost={this.handleChangeHost}\n            handleAddRow={this.handleAddRow}\n            handleRemoveRow={this.handleRemoveRow}\n            handleRemoveSpecificRow={this.handleRemoveSpecificRow}\n            handleSubmit={this.handleSubmit}\n          />\n         \n        </div>\n      );\n    } else if (this.state.type === \"PC\") {\n      // form for PC configuration\n      //    Number of Tickets\n      mainComponent = (\n        <div className=\"config-container\">\n          <Walkthrough playerType=\"PC\" type=\"config\" runWalkthrough={this.state.runWalkthrough}/>\n          <h1 className=\"pc-configuration\">Player Setup</h1>\n          <hr />\n          <form onSubmit={this.handleSubmit}>\n            <table className=\"config-table\" id=\"pc-config-table\">\n              <tbody>\n                <tr>\n                  <td className=\"number-tickets\">Number of Users:</td>\n                  <td>\n                    <input\n                      type=\"number\"\n                      max=\"6\"\n                      min=\"1\"\n                      disabled\n                      value={String(this.state.numOfUsers)}\n                      onChange={this.handleChangePC}\n                      required\n                    />\n                  </td>\n                </tr>\n                <tr>\n                  <td>Waiting for host to start the game</td>\n                  <td>\n                  \n                  </td>\n                </tr>\n              </tbody>\n            </table>\n          </form>\n         \n        </div>\n      );\n    }\n    return (\n      <>\n        {mainComponent}\n       \n      </>\n    );\n  }\n}\n\nexport default Config;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}