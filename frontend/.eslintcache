[{"/Users/ashish/Documents/tambola/frontend/src/index.tsx":"1","/Users/ashish/Documents/tambola/frontend/src/utils/utils.tsx":"2","/Users/ashish/Documents/tambola/frontend/src/components/App.tsx":"3","/Users/ashish/Documents/tambola/frontend/src/components/EnterName.tsx":"4","/Users/ashish/Documents/tambola/frontend/src/components/Config.tsx":"5","/Users/ashish/Documents/tambola/frontend/src/components/Player.tsx":"6","/Users/ashish/Documents/tambola/frontend/src/components/Walkthrough.tsx":"7","/Users/ashish/Documents/tambola/frontend/src/components/Toast.tsx":"8","/Users/ashish/Documents/tambola/frontend/src/components/ConfigTable.tsx":"9","/Users/ashish/Documents/tambola/frontend/src/components/Snackbar.tsx":"10","/Users/ashish/Documents/tambola/frontend/src/components/Board.tsx":"11","/Users/ashish/Documents/tambola/frontend/src/components/PcTicket.tsx":"12","/Users/ashish/Documents/tambola/frontend/src/components/Prizes.tsx":"13","/Users/ashish/Documents/tambola/frontend/src/components/MultipleHostTickets.tsx":"14","/Users/ashish/Documents/tambola/frontend/src/components/Waiting.tsx":"15","/Users/ashish/Documents/tambola/frontend/src/components/BoardLine.tsx":"16","/Users/ashish/Documents/tambola/frontend/src/components/Timer.tsx":"17","/Users/ashish/Documents/tambola/frontend/src/components/Notification.tsx":"18","/Users/ashish/Documents/tambola/frontend/src/components/Ticket.tsx":"19","/Users/ashish/Documents/tambola/frontend/src/components/NewNumber.tsx":"20","/Users/ashish/Documents/tambola/frontend/src/components/HostTicket.tsx":"21","/Users/ashish/Documents/tambola/frontend/src/components/WinningButtons.tsx":"22","/Users/ashish/Documents/tambola/frontend/src/components/Box.tsx":"23","/Users/ashish/Documents/tambola/frontend/src/components/House.tsx":"24","/Users/ashish/Documents/tambola/frontend/src/components/ResultButtons.tsx":"25","/Users/ashish/Documents/tambola/frontend/src/components/GoneNumbers.tsx":"26","/Users/ashish/Documents/tambola/frontend/src/components/Line.tsx":"27","/Users/ashish/Documents/tambola2/frontend/src/index.tsx":"28","/Users/ashish/Documents/tambola2/frontend/src/components/App.tsx":"29","/Users/ashish/Documents/tambola2/frontend/src/utils/utils.tsx":"30","/Users/ashish/Documents/tambola2/frontend/src/components/EnterName.tsx":"31","/Users/ashish/Documents/tambola2/frontend/src/components/Config.tsx":"32","/Users/ashish/Documents/tambola2/frontend/src/components/ConfigTable.tsx":"33","/Users/ashish/Documents/tambola2/frontend/src/components/Player.tsx":"34","/Users/ashish/Documents/tambola2/frontend/src/components/Toast.tsx":"35","/Users/ashish/Documents/tambola2/frontend/src/components/Walkthrough.tsx":"36","/Users/ashish/Documents/tambola2/frontend/src/components/PcTicket.tsx":"37","/Users/ashish/Documents/tambola2/frontend/src/components/Board.tsx":"38","/Users/ashish/Documents/tambola2/frontend/src/components/Prizes.tsx":"39","/Users/ashish/Documents/tambola2/frontend/src/components/MultipleHostTickets.tsx":"40","/Users/ashish/Documents/tambola2/frontend/src/components/Ticket.tsx":"41","/Users/ashish/Documents/tambola2/frontend/src/components/NewNumber.tsx":"42","/Users/ashish/Documents/tambola2/frontend/src/components/Timer.tsx":"43","/Users/ashish/Documents/tambola2/frontend/src/components/Notification.tsx":"44","/Users/ashish/Documents/tambola2/frontend/src/components/WinningButtons.tsx":"45","/Users/ashish/Documents/tambola2/frontend/src/components/Waiting.tsx":"46","/Users/ashish/Documents/tambola2/frontend/src/components/BoardLine.tsx":"47","/Users/ashish/Documents/tambola2/frontend/src/components/HostTicket.tsx":"48","/Users/ashish/Documents/tambola2/frontend/src/components/House.tsx":"49","/Users/ashish/Documents/tambola2/frontend/src/components/GoneNumbers.tsx":"50","/Users/ashish/Documents/tambola2/frontend/src/components/ResultButtons.tsx":"51","/Users/ashish/Documents/tambola2/frontend/src/components/Box.tsx":"52","/Users/ashish/Documents/tambola2/frontend/src/components/Line.tsx":"53"},{"size":334,"mtime":1620788830000,"results":"54","hashOfConfig":"55"},{"size":7164,"mtime":1620788830000,"results":"56","hashOfConfig":"55"},{"size":607,"mtime":1635328891913,"results":"57","hashOfConfig":"55"},{"size":2590,"mtime":1635319106551,"results":"58","hashOfConfig":"55"},{"size":16281,"mtime":1635320954572,"results":"59","hashOfConfig":"55"},{"size":4096,"mtime":1634198576442,"results":"60","hashOfConfig":"55"},{"size":4493,"mtime":1620788830000,"results":"61","hashOfConfig":"55"},{"size":1113,"mtime":1620788830000,"results":"62","hashOfConfig":"55"},{"size":2102,"mtime":1632393680675,"results":"63","hashOfConfig":"55"},{"size":1347,"mtime":1620788830000,"results":"64","hashOfConfig":"55"},{"size":5433,"mtime":1633041182544,"results":"65","hashOfConfig":"55"},{"size":2770,"mtime":1633028541724,"results":"66","hashOfConfig":"55"},{"size":5252,"mtime":1633144462142,"results":"67","hashOfConfig":"55"},{"size":3996,"mtime":1633028472498,"results":"68","hashOfConfig":"55"},{"size":952,"mtime":1620788830000,"results":"69","hashOfConfig":"55"},{"size":455,"mtime":1620788830000,"results":"70","hashOfConfig":"55"},{"size":1115,"mtime":1620788830000,"results":"71","hashOfConfig":"55"},{"size":2990,"mtime":1633144729237,"results":"72","hashOfConfig":"55"},{"size":1034,"mtime":1620788830000,"results":"73","hashOfConfig":"55"},{"size":1505,"mtime":1620788830000,"results":"74","hashOfConfig":"55"},{"size":5186,"mtime":1635281779038,"results":"75","hashOfConfig":"55"},{"size":891,"mtime":1632417220128,"results":"76","hashOfConfig":"55"},{"size":1849,"mtime":1620788830000,"results":"77","hashOfConfig":"55"},{"size":1015,"mtime":1620788830000,"results":"78","hashOfConfig":"55"},{"size":570,"mtime":1633029207987,"results":"79","hashOfConfig":"55"},{"size":1508,"mtime":1620788830000,"results":"80","hashOfConfig":"55"},{"size":1029,"mtime":1620788830000,"results":"81","hashOfConfig":"55"},{"size":334,"mtime":1620788830000,"results":"82","hashOfConfig":"83"},{"size":607,"mtime":1635328891913,"results":"84","hashOfConfig":"83"},{"size":7164,"mtime":1620788830000,"results":"85","hashOfConfig":"83"},{"size":2590,"mtime":1635319106551,"results":"86","hashOfConfig":"83"},{"size":16281,"mtime":1687630652351,"results":"87","hashOfConfig":"83"},{"size":2128,"mtime":1687630830383,"results":"88","hashOfConfig":"83"},{"size":4096,"mtime":1634198576442,"results":"89","hashOfConfig":"83"},{"size":1113,"mtime":1620788830000,"results":"90","hashOfConfig":"83"},{"size":4493,"mtime":1620788830000,"results":"91","hashOfConfig":"83"},{"size":2770,"mtime":1633028541724,"results":"92","hashOfConfig":"83"},{"size":5433,"mtime":1633041182544,"results":"93","hashOfConfig":"83"},{"size":5252,"mtime":1633144462142,"results":"94","hashOfConfig":"83"},{"size":3996,"mtime":1633028472498,"results":"95","hashOfConfig":"83"},{"size":1034,"mtime":1620788830000,"results":"96","hashOfConfig":"83"},{"size":1505,"mtime":1620788830000,"results":"97","hashOfConfig":"83"},{"size":1115,"mtime":1620788830000,"results":"98","hashOfConfig":"83"},{"size":2990,"mtime":1633144729237,"results":"99","hashOfConfig":"83"},{"size":891,"mtime":1632417220128,"results":"100","hashOfConfig":"83"},{"size":952,"mtime":1620788830000,"results":"101","hashOfConfig":"83"},{"size":455,"mtime":1620788830000,"results":"102","hashOfConfig":"83"},{"size":5186,"mtime":1635281779038,"results":"103","hashOfConfig":"83"},{"size":1015,"mtime":1620788830000,"results":"104","hashOfConfig":"83"},{"size":1508,"mtime":1620788830000,"results":"105","hashOfConfig":"83"},{"size":570,"mtime":1633029207987,"results":"106","hashOfConfig":"83"},{"size":1849,"mtime":1620788830000,"results":"107","hashOfConfig":"83"},{"size":1029,"mtime":1620788830000,"results":"108","hashOfConfig":"83"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},"17g7n17",{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"111"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"111"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"111"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"111"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"111"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"111"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"f9b88e",{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"177","messages":"178","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"179","messages":"180","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"183","messages":"184","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"189","messages":"190","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"195","messages":"196","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"211","messages":"212","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/ashish/Documents/tambola/frontend/src/index.tsx",[],["223","224"],"/Users/ashish/Documents/tambola/frontend/src/utils/utils.tsx",[],"/Users/ashish/Documents/tambola/frontend/src/components/App.tsx",[],"/Users/ashish/Documents/tambola/frontend/src/components/EnterName.tsx",["225","226"],"import * as React from \"react\";\nimport { Component } from \"react\";\nimport Config from \"./Config\";\n\ninterface EnterNameProps {\n  socket: any;\n}\n\ninterface EnterNameState {\n  isEmpty: boolean;\n  name: string;\n  emp_code:string;\n  submitted: boolean;\n}\n\nclass EnterName extends Component<EnterNameProps, EnterNameState> {\n  constructor(props: EnterNameProps) {\n    super(props); \n    const queryParams = new URLSearchParams(window.location.search);\n    let uname = queryParams.get('name') as string;\n    let uemp_code = queryParams.get('emp_id') as string;\n\n    let randomId = '_' + Math.random().toString(36).substr(2, 9);\n\n    if(uname == undefined)\n         uname = \"guest\" + randomId;\n\n    if(uemp_code == undefined)\n         uemp_code = \"emp\" + randomId\n\n    this.state = { isEmpty: false, name: uname, submitted: true, emp_code:uemp_code};\n  }\n\n  handleChange = (event: any) => {\n    const { value } = event.target;\n    if (value !== \"\") {\n      this.setState({ isEmpty: false, name: value });\n    } else {\n      this.setState({ isEmpty: true, name: value });\n    }\n  };\n\n  handleKeyPress = (event: any) => {\n    const { value } = event.target;\n    if (event.key === \"Enter\" && value !== \"\") {\n      console.log(\"enter press here!\");\n      this.setState({\n        submitted: true,\n      });\n    }\n  };\n\n  handleSubmit = (event: any) => {\n    this.setState({\n      submitted: true,\n    });\n    event.preventDefault();\n  };\n\n  render() {\n    if (!this.state.submitted) {\n      let myStyles: React.CSSProperties = {};\n      if (!this.state.isEmpty) {\n        myStyles = { visibility: \"visible\" };\n      } else {\n        myStyles = { visibility: \"hidden\" };\n      }\n      let submitButton = (\n        <div style={myStyles}>\n          <button onClick={this.handleSubmit}>OK</button>\n        </div>\n      )\n\n      return (\n        <div className=\"enter-name-container\">\n          <div className=\"enter-name\">\n            <p className=\"enter-name-question\">Hi. What's your name?</p>\n            <input\n              id=\"enter-name\"\n              type=\"text\"\n              value={this.state.name}\n              placeholder=\"Type your answer here...\"\n              onChange={this.handleChange}\n              onKeyPress={this.handleKeyPress}\n              spellCheck=\"false\"\n              autoFocus\n            />\n            <br />\n            <br />\n            <br />\n            {submitButton}\n          </div>\n        </div>\n      );\n    } else {\n      return <Config socket={this.props.socket} name={this.state.name} emp_code={this.state.emp_code} />;\n    }\n  }\n}\n\nexport default EnterName;\n","/Users/ashish/Documents/tambola/frontend/src/components/Config.tsx",["227","228","229","230","231","232","233","234"],"import * as React from \"react\";\nimport { Component } from \"react\";\nimport ConfigTable from \"./ConfigTable\";\nimport Player from \"./Player\";\nimport ReadyPlayers from \"./ReadyPlayers\";\nimport Snackbar from \"./Snackbar\";\nimport Walkthrough from \"./Walkthrough\";\nimport Modal from \"react-modal\";\nimport Toast from \"./Toast\";\nimport axios from 'axios';\nimport { resultObj} from \"./Player\";\n\n\nconst customModalStyles = {\n  content: {\n    top: \"50%\",\n    left: \"50%\",\n    right: \"auto\",\n    bottom: \"auto\",\n    marginRight: \"-50%\",\n    transform: \"translate(-50%, -50%)\",\n    backgroundColor: \"#0e141f\",\n  },\n  overlay: {\n    backgroundColor: \"rgba(255, 255, 255, 0.35)\",\n    transition: \"all 1s\",\n  },\n};\n\nexport interface Award {\n  // Actual type information:\n  // {\n  //    nameAward: string;\n  //    numAward: string;\n  // }\n  [index: string]: string;\n}\n\nexport interface PcStatus {\n  user: User;\n  ready: boolean;\n  numTickets: number;\n}\n\nexport interface User {\n  username: string;\n  id: string;\n  room: string;\n  emp_code:string;\n}\n\ninterface ConfigProps {\n  socket: any;\n  name: string;\n  emp_code:string;\n  \n}\n\ninterface ConfigState {\n  type: string;\n\n  // Config\n  readyHost: boolean;\n  readyClient: boolean;\n\n  //  Host Config State options\n  awards: Award[];\n\n  //  PC Config State options\n  numHouses: number;\n\n  numOfUsers:Number;\n\n  // List of players who are ready to play\n  PcsStatus: PcStatus[];\n\n  // notification for host disconnected\n  hostDisconnected: boolean;\n\n  userName:String;\n  emp_code:String;\n  calledWinWithBogeyTicket:boolean;\n\n  gameFinished :boolean;\n\n  // For warning modal which opens when host hits start game if some player is not ready\n  isModalOpen: boolean;\n\n  // When host tries to start game when there is no one in the game room\n  isToastOpen: boolean;\n\n  // when arrive on host screen, ask the user if they want to see tutorial or not\n  watchTutorialModal: boolean\n\n  // passed to child components to let them know if user selected to watch the tutorial or not\n  runWalkthrough: boolean\n  //\n  hasGameAlreadyStarted: boolean;\n}\n\nclass Config extends Component<ConfigProps, ConfigState> {\n  // For the toast component to hide initially and not add animation on initial render\n  hideToastInitially: boolean;\n  constructor(props: ConfigProps) {\n    super(props);\n    this.state = {\n      type: \"PC\",\n      numHouses: 1,\n       numOfUsers:0,\n       userName:\"\",\n       emp_code:\"\",\n      readyHost: false,\n      readyClient: true,\n      gameFinished:false,\n      PcsStatus: [],\n      isModalOpen: false,\n      isToastOpen: false,\n      watchTutorialModal: true,\n      runWalkthrough: false,\n      hasGameAlreadyStarted: false,\n      calledWinWithBogeyTicket:false,\n      awards: [\n        {\n          nameAward: \"Users\",\n          numAward: \"1\",\n        },\n        {\n          nameAward: \"First Line\",\n          numAward: \"1\",\n        },\n        {\n          nameAward: \"Second Line\",\n          numAward: \"1\",\n        },\n        {\n          nameAward: \"Third Line\",\n          numAward: \"1\",\n        },\n        {\n          nameAward: \"Corners\",\n          numAward: \"1\",\n        },\n        {\n          nameAward: \"Full House\",\n          numAward: \"1\",\n        },\n      ],\n      hostDisconnected: false,\n    };\n    this.hideToastInitially = true;\n  }\n\n  // Only handles on host's config when he presses start game button.\n  handlleHostConfigDone = () => {\n    if (this.state.isModalOpen) {\n      this.setState({ isModalOpen: false });\n    }\n    this.props.socket.emit(\"HostConfigDone\", this.state.awards);\n    console.log(\"config submitted from host\", this.state.awards);\n  };\n\n  componentDidMount() {\n    // Extracting roomID from the URL\n    let roomID = window.location.pathname.substr(\n      window.location.pathname.lastIndexOf(\"/\") + 1\n    );\n\n    const queryParams = new URLSearchParams(window.location.search);\n      const type = queryParams.get('type') as string;\n      \n      this.setState({\n        type: type, // pass this type to player as well\n      });\n\n      if(type == \"PC\")\n      {\n       console.log(\"emp_code: \" + this.props.emp_code)\n          axios({\n            method: 'post',\n            url: 'https://techkilla.com/tambola/tambola_users.php',\n            headers: { 'content-type': 'application/json' },\n            data: {name:this.props.name,emp_code:this.props.emp_code}\n          })\n            .then(result => {\n              console.log(\"result: \" + result.data);\n            })\n            .catch(error => console.log(error.message));\n    \n      }\n\n    // asking server to join room\n    this.props.socket.emit(\"joinRoom\", {\n      room: roomID,\n      username: this.props.name,\n      emp_code: this.props.emp_code,\n    });\n\n    // check if the game has already started or not\n    this.props.socket.on(\"gameHasAlreadyStarted\", () => {\n      this.setState({ hasGameAlreadyStarted: true });\n    });\n\n    this.props.socket.on('numOfUsers',(roomSize:Number)=>{\n        this.setState({numOfUsers:roomSize})\n    })\n\n    \n\n    // server response: player gets know if he is host or pc\n    this.props.socket.on(\"userConnected\", (playerTypeObj: any) => {\n      \n\n      // Receiving event on Host from new PC who has joined and sending them\n      // the list of readyPlayers\n      if (playerTypeObj.type === \"Host\") {\n        this.props.socket.on(\"notifyHostConnection\", (user: User) => {\n          let PcsStatus = this.state.PcsStatus;\n          let newPcStatus: PcStatus = {\n            user: user,\n            ready: false,\n            numTickets: 0,\n          };\n          PcsStatus.push(newPcStatus);\n          this.setState({ PcsStatus: PcsStatus });\n          this.props.socket.emit(\"PcsStatus\", user, PcsStatus);\n        });\n\n       \n\n        this.props.socket.on(\"PcReady\", (user: User, numTickets: number) => {\n          // Find user in array and make him ready\n          let PcsStatus = this.state.PcsStatus;\n          for (let i = 0; i < PcsStatus.length; ++i) {\n            if (PcsStatus[i].user.id === user.id) {\n              PcsStatus[i].ready = true;\n              PcsStatus[i].numTickets = numTickets;\n            }\n          }\n          this.setState({ PcsStatus: PcsStatus });\n          this.props.socket.emit(\"PcsStatus\", user, PcsStatus);\n        });\n\n        this.props.socket.on(\"userDisconnect\", (user: User) => {\n          // dealing with ready/not ready\n          let PcsStatus = this.state.PcsStatus;\n          for (let i = 0; i < PcsStatus.length; ++i) {\n            if (PcsStatus[i].user.id === user.id) {\n              // Remove this user from PcsStatus\n              PcsStatus.splice(i, 1);\n            }\n          }\n          this.setState({ PcsStatus: PcsStatus });\n          this.props.socket.emit(\"PcsStatus\", user, PcsStatus);\n        });\n      }\n    });\n\n    // server sending awards from Host as Host is ready\n    this.props.socket.on(\"HostConfigDone\", (awards: any) => {\n      this.setState({\n        awards: awards,\n        readyHost: true,\n      });\n    });\n\n    this.props.socket.on(\"resultsForPC\", (resultsObj: resultObj) => {\n        if(this.props.name == resultsObj.calledWinUsername && this.props.emp_code == resultsObj.calledWinUserEmpCode)\n        {\n          if (resultsObj.result === \"Bogey!\") {\n            this.props.socket.disconnect();\n            this.setState({\n              calledWinWithBogeyTicket:true\n            })\n          }else\n          {\n            console.log(\"emp_code winning: \" + this.props.emp_code)\n\n            axios({\n              method: 'post',\n              url: 'https://techkilla.com/tambola/tambola_result.php',\n              headers: { 'content-type': 'application/json' },\n              data: {name:resultsObj.calledWinUsername,emp_code:resultsObj.calledWinUserEmpCode,award:resultsObj.callWinType}\n            })\n              .then(result => {\n                console.log(\"result: \" + result.data);\n              })\n              .catch(error => console.log(error.message));\n            \n          }//\n        }\n    });\n\n    // Know the status of all the players if someone new joined or got ready\n    this.props.socket.on(\"PcsStatus\", (PcsStatus: PcStatus[]) => {\n      this.setState({ PcsStatus: PcsStatus });\n    });\n\n    // Host disconnect\n    this.props.socket.on(\"HostDisconnected\", (userHost: User) => {\n      console.log(userHost, \": host disconnected\");\n      this.setState({\n        hostDisconnected: true,\n      });\n      this.props.socket.disconnect();\n    });\n\n    this.props.socket.on(\"GameFinished\", () => {\n      console.log(\"Game Finished\");\n      if(this.state.type == \"PC\")\n          this.props.socket.disconnect();\n          \n      this.setState({\n        gameFinished:true,\n      });\n    });\n\n    \n  }\n\n  // For Host Config\n  handleChangeHost = (idx: number) => (e: any) => {\n    const eTarget = e.target;\n    let name: string = eTarget.name;\n    let value: string = eTarget.value;\n\n    const awards = this.state.awards;\n\n    awards[idx][name] = value;\n\n    this.setState({\n      awards,\n    });\n  };\n  handleAddRow = () => {\n    const item = {\n      nameAward: \"\",\n      numAward: \"\",\n    };\n    this.setState({\n      awards: [...this.state.awards, item],\n    });\n  };\n  handleRemoveRow = () => {\n    this.setState({\n      awards: this.state.awards.slice(0, -1),\n    });\n  };\n  handleRemoveSpecificRow = (idx: number) => () => {\n    const awards = [...this.state.awards];\n    awards.splice(idx, 1);\n    this.setState({ awards });\n  };\n\n  // For PC Config\n  handleChangePC = (event: any) => {\n    const { value } = event.target;\n    if (this.state.type === \"PC\") {\n      // sanity check\n      this.setState({\n        numHouses: value,\n      });\n    }\n  };\n\n  // common function for Host and PC Config\n  handleSubmit = (event: any) => {\n    this.setState({\n      readyClient: true,\n    });\n    if (this.state.type === \"Host\") {\n      // start the game only when there are actual players in the game\n      if (this.state.numOfUsers > 0) {\n        // checking if all the players are ready\n        let isEveryOneReady = true;\n        for (let i = 0; i < this.state.PcsStatus.length; ++i) {\n          if (!this.state.PcsStatus[i].ready) {\n            isEveryOneReady = true;\n            continue;\n          }\n        }\n        if (isEveryOneReady) {\n          this.handlleHostConfigDone();\n        } else {\n          this.setState({ isModalOpen: true });\n        }\n      } else {\n        // To make the toast visible\n        this.hideToastInitially = false;\n        this.setState({ isToastOpen: true });\n      }\n    } else if (this.state.type === \"PC\") {\n      //let everyone know that i am ready. Backend knows who I am by socket.id\n      this.props.socket.emit(\"PcReady\", this.state.numHouses);\n    }\n    event.preventDefault();\n  };\n\n  render() {\n    // game is over if there is no host\n    if (this.state.hostDisconnected) {\n      return (\n        <>\n          <h1 className=\"host-configuration\">\n            Host left the game. Please close this tab. Generate a new room if\n            you want to play more.\n          </h1>\n          <a href={String(window.location)} style={{ color: \"white\" }}>\n            <button>Back</button>\n          </a>\n        </>\n      );\n    }\n\n    if (this.state.calledWinWithBogeyTicket) {\n      return (\n        <>\n          <h1 className=\"host-configuration\">\n             Unfortunatly your ticket was bogey. Thankyou for playing .\n          </h1>\n        </>\n      );\n    }\n\n    if (this.state.gameFinished && this.state.type == \"Host\") {\n      return (\n        <>\n          <h1 className=\"host-configuration\">\n            Game Finished. Thankyou for playing.\n          </h1>\n          <a href={String(window.location)} style={{ color: \"white\" }}>\n           \n            <button>Back</button>\n          </a>\n        </>\n      );\n    }else if(this.state.gameFinished)\n    {\n      return (\n        <>\n          <h1 className=\"host-configuration\">\n            Game Finished. Thankyou for playing.\n          </h1>\n        </>\n      );\n    }\n\n    // If new playerjoins in already started game or host becomes ready (starts the game)\n    // this pc is not ready, let him know that he cannot play now in this game\n    // if (\n    //   this.state.hasGameAlreadyStarted ||\n    //   (this.state.readyHost && !this.state.readyClient)\n    // ) {\n    //   return (\n    //     <>\n    //       <h1 className=\"host-configuration\">\n    //         This game was started without you. You can play in the next game.\n    //         Meanwhile you can go back to the home screen and play another game\n    //         :)\n    //       </h1>\n    //       <a href=\"/\" style={{ color: \"white\" }}>\n    //         <button>Home</button>\n    //       </a>\n    //     </>\n    //   );\n    // }\n\n    let mainComponent = null;\n    if (this.state.readyHost && this.state.readyClient) {\n      // display player\n      mainComponent = (\n        <Player\n          socket={this.props.socket}\n          numHouses={this.state.numHouses}\n          name={this.props.name}\n          emp_code = {this.props.emp_code}\n          type={this.state.type}\n          awards={this.state.awards}\n          runWalkthrough={this.state.runWalkthrough}\n        />\n      );\n    } else if (this.state.type === \"Host\") {\n      // form for host configuration\n      //    Choosing Awards\n      // pass handleSubmit as a prop\n      this.state.awards[0] = {nameAward:\"Users\",numAward:String(this.state.numOfUsers)};\n      mainComponent = (\n        <div className=\"config-container\">\n          <Walkthrough playerType=\"Host\" type=\"config\" runWalkthrough={this.state.runWalkthrough}/>\n          {/* <Snackbar\n            message=\"Share this 'join link' with other players\"\n            actionText=\"Copy Link\"\n          /> */}\n          <Toast\n            message={\"There are no players in the game right now\"}\n            isShown={this.state.isToastOpen}\n            handleClose={() => {\n              this.setState({ isToastOpen: false });\n            }}\n            initiallyHidden={this.hideToastInitially}\n          />\n          <Modal isOpen={this.state.isModalOpen} style={customModalStyles}>\n            <h3>Some players are still not ready.</h3>\n            <h3>Are you sure you want to start the game?</h3>\n            <div className=\"modal-buttons\">\n              <button onClick={this.handlleHostConfigDone}>Yes</button>\n              <button\n                onClick={() => {\n                  this.setState({ isModalOpen: false });\n                }}\n              >\n                No\n              </button>\n            </div>\n          </Modal>\n          <h1 className=\"host-configuration\">Game Setup</h1>\n          <hr />\n          \n          <ConfigTable\n            awards={this.state.awards}\n            handleChangeHost={this.handleChangeHost}\n            handleAddRow={this.handleAddRow}\n            handleRemoveRow={this.handleRemoveRow}\n            handleRemoveSpecificRow={this.handleRemoveSpecificRow}\n            handleSubmit={this.handleSubmit}\n          />\n         \n        </div>\n      );\n    } else if (this.state.type === \"PC\") {\n      // form for PC configuration\n      //    Number of Tickets\n      mainComponent = (\n        <div className=\"config-container\">\n          <Walkthrough playerType=\"PC\" type=\"config\" runWalkthrough={this.state.runWalkthrough}/>\n          <h1 className=\"pc-configuration\">Player Setup</h1>\n          <hr />\n          <form onSubmit={this.handleSubmit}>\n            <table className=\"config-table\" id=\"pc-config-table\">\n              <tbody>\n                <tr>\n                  <td className=\"number-tickets\">Number of Users:</td>\n                  <td>\n                    <input\n                      type=\"number\"\n                      max=\"6\"\n                      min=\"1\"\n                      disabled\n                      value={String(this.state.numOfUsers)}\n                      onChange={this.handleChangePC}\n                      required\n                    />\n                  </td>\n                </tr>\n                <tr>\n                  <td>Waiting for host to start the game</td>\n                  <td>\n                  \n                  </td>\n                </tr>\n              </tbody>\n            </table>\n          </form>\n         \n        </div>\n      );\n    }\n    return (\n      <>\n        {mainComponent}\n       \n      </>\n    );\n  }\n}\n\nexport default Config;\n","/Users/ashish/Documents/tambola/frontend/src/components/Player.tsx",["235"],"import * as React from \"react\";\nimport { Component } from \"react\";\nimport Board from \"./Board\";\nimport { BoxState } from \"./Box\";\nimport PcTicket from \"./PcTicket\";\nimport MultipleHostTicket from \"./MultipleHostTickets\";\nimport { Award } from \"./Config\";\nimport Prizes from \"./Prizes\";\nimport Walkthrough from \"./Walkthrough\";\nimport Reward from \"react-rewards\";\nimport { doNotLeavePage } from \"../utils/utils\";\n\n\nexport interface callWin {\n  callWinType: string;\n  goneNumbers: Array<number>;\n  houses: Array<Array<Array<BoxState>>>;\n  user: { id: string; username: string; room: string,emp_code:string};\n}\n\nexport interface resultObj {\n  callWinType: string;\n  calledWinUsername: string;\n  calledWinUserEmpCode:string;\n  calledWinSocketId:String;\n  result: string;\n}\n\ninterface PlayerProps {\n  socket: any;\n  type: string; // type is either PC or host\n  name: string;\n  emp_code:string;\n\n  // awards coming for buttons and leaderboard\n  awards: Award[];\n\n  // for PC\n  numHouses: number;\n  runWalkthrough: boolean\n}\n\ninterface PlayerState {\n  hasGameEnded: boolean;\n}\n\nclass Player extends Component<PlayerProps, PlayerState> {\n  // The declarations are just for Host type\n  ticketFromPlayer: Array<Array<Array<BoxState>>> | undefined;\n  winningCallFromPlayer: string | undefined;\n  userCalledForWin: { id: string; username: string; room: string } | undefined;\n  reward: any;\n  constructor(props: PlayerProps) {\n    super(props);\n    this.state = {\n      hasGameEnded: false,\n    };\n  }\n\n  // This function will be called if game ends\n  endGame = () => {\n    this.setState({ hasGameEnded: true });\n    this.reward.rewardMe();\n    window.removeEventListener('beforeunload', doNotLeavePage);\n    let timesRun = 0;\n    let interval = setInterval(() => {\n      this.reward.rewardMe();\n      ++timesRun;\n      if (timesRun === 4) clearInterval(interval);\n    }, 2000);\n  };\n\n  render() {\n    let mainComponent = null;\n    let gameOverP = null;\n    let board;\n    let gameEndedCssClass = \"\";\n    if (this.state.hasGameEnded) {\n      // This css class changes the opacity and disable all the clicks.\n      // This is different from how it is handled in Notifications component\n      gameEndedCssClass = \"game-ended no-click\";\n      gameOverP = <p className=\"game-over animated rubberBand\">Game Over</p>;\n    }\n    if (this.props.type === \"PC\") {\n      mainComponent = (\n        <div className=\"everything-but-prizes\">\n          <Walkthrough type=\"game\" playerType=\"PC\" runWalkthrough={this.props.runWalkthrough}/>\n          <div className={gameEndedCssClass}>\n            <PcTicket\n              socket={this.props.socket}\n              numHouses={this.props.numHouses}\n              awards={this.props.awards}\n              endGame={this.endGame}\n            />\n          </div>\n          {gameOverP}\n        </div>\n      );\n    } else if (this.props.type === \"Host\") {\n      mainComponent = (\n        <div className=\"everything-but-prizes\">\n          <Walkthrough type=\"game\" playerType=\"Host\" runWalkthrough={this.props.runWalkthrough}/>\n          <div className={gameEndedCssClass}>\n           <Board socket={this.props.socket} endGame={this.endGame}/>\n            <MultipleHostTicket socket={this.props.socket} showWalkthrough={this.props.runWalkthrough}/>\n          </div>\n          {gameOverP}\n        </div>\n      );\n    }\n    return (\n      <>\n        <div className=\"main-container\">\n          {mainComponent}\n          <Prizes\n            socket={this.props.socket}\n            awards={this.props.awards}\n            playerType={this.props.type}\n            endGame={this.endGame}\n          />\n        </div>\n        {/* This is just for game over confetti */}\n        <div className=\"game-over-reward\">\n          <Reward\n            ref={(ref: any) => {\n              this.reward = ref;\n            }}\n            type=\"confetti\"\n            config={{\n              elementCount: 90,\n              angle: 70,\n              spread: 70,\n              decay: 0.95,\n              lifetime: 100,\n            }}\n          ></Reward>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default Player;\n","/Users/ashish/Documents/tambola/frontend/src/components/Walkthrough.tsx",[],"/Users/ashish/Documents/tambola/frontend/src/components/Toast.tsx",[],"/Users/ashish/Documents/tambola/frontend/src/components/ConfigTable.tsx",[],"/Users/ashish/Documents/tambola/frontend/src/components/Snackbar.tsx",[],["236","237"],"/Users/ashish/Documents/tambola/frontend/src/components/Board.tsx",[],"/Users/ashish/Documents/tambola/frontend/src/components/PcTicket.tsx",["238"],"import * as React from \"react\";\nimport { Component } from \"react\";\nimport Ticket from \"./Ticket\";\nimport { BoxState } from \"./Box\";\nimport { generateTicket } from \"../utils/utils\";\nimport WinningButtons from \"./WinningButtons\";\nimport NewNumber from \"./NewNumber\";\nimport Notification from \"./Notification\";\nimport { Award } from \"./Config\";\nimport Waiting from \"./Waiting\";\nimport Timer from \"./Timer\";\nimport Board from \"./Board\";\n\ninterface PcTicketProps {\n  socket: any;\n\n  // awards coming for winning buttons\n  awards: Award[];\n\n  // number of houses\n  numHouses: number;\n\n  endGame: () => void;\n}\n\ninterface PcTicketState {\n  showTimer: boolean;\n}\n\nclass PcTicket extends Component<PcTicketProps, PcTicketState> {\n  houses: Array<Array<Array<BoxState>>>;\n  constructor(props: PcTicketProps) {\n    super(props);\n    this.houses = generateTicket(this.props.numHouses);\n    this.state = { showTimer: false };\n  }\n  componentDidMount() {\n    this.props.socket.on(\"showTimer\", () => {\n      this.setState({ showTimer: true });\n    });\n\n    // hiding timer in case there is another call for win\n    this.props.socket.on(\"callWinToHost\", () => {\n      if (this.state.showTimer === true) this.setState({ showTimer: false });\n    });\n\n  }\n  changeTicketState = (\n    houseIndex: number,\n    lineIndex: number,\n    boxIndex: number,\n    check: boolean\n  ): void => {\n    let { value } = this.houses[houseIndex][lineIndex][boxIndex];\n    this.houses[houseIndex][lineIndex][boxIndex] = { value: value, check };\n    console.log(\"here it is after changing\", this.houses);\n  };\n\n  handleWinningCall = (callWinType: string) => {\n    // send ticket here as well\n    this.props.socket.emit(\"callWinFromPC\", {\n      callWinType: callWinType,\n      houses: this.houses,\n    });\n  };\n\n  winningButtons = (\n    <WinningButtons\n      key={0}\n      awards={this.props.awards}\n      winCallBack={this.handleWinningCall}\n    />\n  );\n\n  render() {\n    let timer = null;\n    if (this.state.showTimer) {\n      timer = <Timer socket={this.props.socket} endGame={this.props.endGame} />;\n    }\n\n    return (\n      <div className=\"pc-ticket\">\n        <NewNumber socket={this.props.socket} />\n        {timer}\n        <Waiting playerType=\"PC\" socket={this.props.socket} />\n        <div className=\"notification-parent\">\n          {/* This div is for setting the opacity when notification is shown */}\n          <div id=\"ticket-board-container\">\n            <Ticket\n              houses={this.houses}\n              changeTicketState={this.changeTicketState}\n              numHouses={this.props.numHouses}\n            />\n          </div>\n\n          <Notification socket={this.props.socket} type=\"Pc\" />\n        </div>\n\n        {this.winningButtons}\n      </div>\n    );\n  }\n}\n\nexport default PcTicket;\n","/Users/ashish/Documents/tambola/frontend/src/components/Prizes.tsx",[],"/Users/ashish/Documents/tambola/frontend/src/components/MultipleHostTickets.tsx",["239"],"import * as React from \"react\";\nimport { Component } from \"react\";\nimport { callWin } from \"./Player\";\nimport HostTicket from \"./HostTicket\";\nimport Joyride, { Step } from \"react-joyride\";\nimport Board from \"./Board\";\n\ninterface MultipleHostTicketProps {\n  socket: any;\n  showWalkthrough: boolean;\n}\n\ninterface MultipleHostTicketState {\n  ticketFromPlayers: { [id: string]: callWin };\n  runWalkthrough: boolean;\n}\n\nclass MultipleHostTicket extends Component<\n  MultipleHostTicketProps,\n  MultipleHostTicketState\n> {\n  hasWalkthroughShown: boolean;\n  constructor(props: MultipleHostTicketProps) {\n    super(props);\n    this.state = { ticketFromPlayers: {}, runWalkthrough: false };\n    \n    // hasWalkthrough shown handles this logic: \n    // if player tickets become zero then the tutorial is shown and hasWalkthrough shown\n    // becomes true and tutorial is never shown. This is the case when in props we receive\n    // showWalkthrough as true. If it is false then we just change hasWalkthrough shown to be\n    // true and then the walkThrough never playes\n    this.hasWalkthroughShown = !this.props.showWalkthrough;\n  }\n\n  walkThroughSteps: Step[] = [\n    {\n      target: \".host-ticket\",\n      content:\n        \"This is the player's ticket. They think they have won this award. Your task is to check the 'crossed' numbers on this ticket and tell the players if this is a valid win or a Bogey!\",\n      disableBeacon: true,\n      placement: \"bottom\",\n      disableOverlay: true,\n    },\n  ];\n\n  componentDidMount() {\n    this.props.socket.on(\"callWinToHost\", (callWinObj: callWin) => {\n      // updating values\n      let newTicketsState = this.state.ticketFromPlayers;\n      let runWalkthrough: boolean = this.hasWalkthroughShown ? false : true;\n\n      // JS does not support keys to be objects, so this is easy workaround for the\n      // case when same user made 2 different win calls at the same time; The key\n      // is a string concatenation of id and wintype\n      newTicketsState[callWinObj.user.id + callWinObj.callWinType] = callWinObj;\n      this.setState({\n        ticketFromPlayers: newTicketsState,\n        runWalkthrough: runWalkthrough,\n      });\n      // Disable the generate new button\n      let generateNewButton = document.querySelector(\n        \"button.new-number\"\n      ) as HTMLInputElement;\n      generateNewButton.disabled = true;\n      generateNewButton.classList.add(\"disabled-button\");\n    });\n  }\n\n  removeTicket = (idWinCall: string) => {\n    let newState = this.state.ticketFromPlayers;\n    delete newState[idWinCall];\n    this.setState({ ticketFromPlayers: newState });\n\n    // check if there is no HostTicket then enable the generate new button and emit event for 'Waiting' component\n    if (Object.keys(newState).length === 0 && newState.constructor === Object) {\n      let generateNewButton = document.querySelector(\n        \"button.new-number\"\n      ) as HTMLInputElement;\n      generateNewButton.disabled = false;\n      generateNewButton.classList.remove(\"disabled-button\");\n      this.props.socket.emit(\"hostCompletedChecking\");\n    }\n  };\n\n  render() {\n    let ticketComponents = [];\n    for (const [key, value] of Object.entries(this.state.ticketFromPlayers)) {\n      let ticket = (\n        <HostTicket\n          key={key}\n          socket={this.props.socket}\n          callWinObj={value}\n          removeTicketFromHost={this.removeTicket}\n        />\n      );\n      ticketComponents.push(ticket);\n    }\n    return (\n      <>\n        {ticketComponents}\n        <Joyride\n          steps={this.walkThroughSteps}\n          run={this.state.runWalkthrough}\n          continuous={true}\n          disableOverlayClose={true}\n          showProgress={true}\n          showSkipButton={true}\n          spotlightClicks={true}\n          styles={{\n            options: {\n              zIndex: 10000,\n              primaryColor: \"#0e141f\",\n              textColor: \"#0e141f\",\n            },\n          }}\n        />\n      </>\n    );\n  }\n}\n\nexport default MultipleHostTicket;\n","/Users/ashish/Documents/tambola/frontend/src/components/Waiting.tsx",[],"/Users/ashish/Documents/tambola/frontend/src/components/BoardLine.tsx",[],"/Users/ashish/Documents/tambola/frontend/src/components/Timer.tsx",[],"/Users/ashish/Documents/tambola/frontend/src/components/Notification.tsx",[],"/Users/ashish/Documents/tambola/frontend/src/components/Ticket.tsx",[],"/Users/ashish/Documents/tambola/frontend/src/components/NewNumber.tsx",[],"/Users/ashish/Documents/tambola/frontend/src/components/HostTicket.tsx",["240","241","242","243","244","245","246","247","248","249","250","251","252"],"import * as React from \"react\";\nimport Ticket from \"./Ticket\";\nimport ResultButtons from \"./ResultButtons\";\nimport { callWin } from \"./Player\";\nimport axios from 'axios';\nimport Board from \"./Board\";\nimport GoneNumbers from \"./GoneNumbers\";\n\n\ninterface HostTicketProps {\n  socket: any;\n  callWinObj: callWin;\n  removeTicketFromHost: (id: string) => void;\n}\n\nfunction HostTicket(props: HostTicketProps) {\n\n  var status = \"\";\n  //console.log(checkFirstLine(props.callWinObj.goneNumbers,props.callWinObj.houses[0][0]),props.callWinObj.callWinType)\n\n  if(props.callWinObj.callWinType == \"First Line\")\n  {\n    console.log(props.callWinObj.callWinType,props.callWinObj.goneNumbers,props.callWinObj.houses[0][0]);\n        status = checkLine(props.callWinObj.goneNumbers,props.callWinObj.houses[0][0]) ? \"True\" : \"False\";\n  }\n  if(props.callWinObj.callWinType == \"Second Line\")\n  {\n       console.log(props.callWinObj.callWinType,props.callWinObj.goneNumbers,props.callWinObj.houses[0][1]);\n        status = checkLine(props.callWinObj.goneNumbers,props.callWinObj.houses[0][1]) ? \"True\" : \"False\";\n  }\n  if(props.callWinObj.callWinType == \"Third Line\")\n  {\n    console.log(props.callWinObj.callWinType,props.callWinObj.goneNumbers,props.callWinObj.houses[0][2]);\n        status = checkLine(props.callWinObj.goneNumbers,props.callWinObj.houses[0][2]) ? \"True\" : \"False\";   \n  }   \n  if(props.callWinObj.callWinType == \"Corners\")\n  {\n        status = checkCorners(props.callWinObj.goneNumbers,props.callWinObj.houses[0][0],props.callWinObj.houses[0][1],props.callWinObj.houses[0][2]) ? \"True\" : \"False\";\n  }\n  if(props.callWinObj.callWinType == \"Full House\")\n  {\n        if(checkLine(props.callWinObj.goneNumbers,props.callWinObj.houses[0][0]) && checkLine(props.callWinObj.goneNumbers,props.callWinObj.houses[0][1]) && checkLine(props.callWinObj.goneNumbers,props.callWinObj.houses[0][2]))\n             status = \"True\";\n        else \n             status = \"False\";     \n  }\n\n  let handleResultCall = (result: string) => {\n    props.socket.emit(\"resultsFromHost\", {\n      result: result,\n      callWinType: props.callWinObj.callWinType,\n      userCalledForWin: props.callWinObj.user,\n    });\n\n\n    // if(result == \"Confirm Win!\")\n    // {\n    // axios({\n    //   method: 'post',\n    //   url: 'https://techkilla.com/tambola/tambola_result.php',\n    //   headers: { 'content-type': 'application/json' },\n    //   data: {name:props.callWinObj.user.username,emp_code:props.callWinObj.user.emp_code,award:props.callWinObj.callWinType}\n    // })\n    //   .then(result => {\n    //     console.log(\"result: \" + result.data);\n    //   })\n    //   .catch(error => console.log(error.message));\n    // }\n\n    // Key is concatenation of id and callWinType\n    props.removeTicketFromHost(\n      props.callWinObj.user.id + props.callWinObj.callWinType\n    );\n  };\n  let playerTicket = (\n    <div className=\"host-ticket\">\n      <br></br>\n      <p className=\"win-call-type\">{props.callWinObj.callWinType}</p>\n      <p className=\"player-name\">{props.callWinObj.user.username}'s Ticket (Win: {status})</p>\n      <div className=\"no-click\">\n        <Ticket\n          houses={props.callWinObj.houses}\n          numHouses={props.callWinObj.houses.length}\n        />\n      </div>\n      <ResultButtons\n        key={0}\n        win={\"Confirm Win!\"}\n        bogey={\"Bogey!\"}\n        resultCallback={handleResultCall}\n      />\n    </div>\n  );\n  return <>{playerTicket}</>;\n}\n\nfunction checkLine(goneNumbers:Array<Number>,line:Array<any>):boolean\n{\n    let count:number = 0;\n    for(var i=0;i<line.length;i++)\n    {\n        if(line[i].value == 0)\n        {\n          count++;\n        }\n        else if(isExist(goneNumbers,line[i].value) && line[i].check)\n        {\n            count++;\n        }\n    }\n    return (count == line.length);\n}\n\nfunction checkCorners(goneNumbers:Array<number>,line1:Array<any>,line2:Array<any>,line3:Array<any>):boolean\n{\n  let firstRowFirstNum:any = getCornerNumber(line1);\n  let firstRowLastNumber:any = getCornerNumber(line1.reverse());\n  let lastRowFirstNum:any = getCornerNumber(line3);\n  let lastRowLastNumber:any = getCornerNumber(line3.reverse());\n  let line:Array<any> = [firstRowFirstNum,firstRowLastNumber,lastRowFirstNum,lastRowLastNumber];\n\n  return checkLine(goneNumbers,line);\n}\n\nfunction getCornerNumber(line:Array<any>):any\n{\n  let num:any;\n  let count = 0;\n\n  do{\n    num = line[count];\n    count++;\n  }while(num.value != 0);\n\n  return num;\n}\n\n// function checkCorners(goneNumbers:Array<number>,line1:Array<any>,line2:Array<any>,line3:Array<any>):boolean\n// {\n//   let leftCorner:Array<any> = [line1[0],line2[0],line3[0]];\n//   let rightCorner:Array<any> = [line1[line1.length-1],line2[line2.length-1],line3[line3.length-1]];\n\n//   return (checkLine(goneNumbers,leftCorner) && checkLine(goneNumbers,rightCorner))\n// }\n\nfunction isExist(goneNumbers:Array<Number>,num:Number):boolean\n{\n  let result:boolean = false;\n\n  if(num == 0)\n    return true;\n\n   for(var i=0;i<goneNumbers.length;i++)\n   {\n     if(goneNumbers[i] == num)\n     {\n        result = true;\n        console.log(num,goneNumbers[i],\"exits\");\n        break;\n     }\n   }\n   return result;\n}\n\nexport default HostTicket;\n","/Users/ashish/Documents/tambola/frontend/src/components/WinningButtons.tsx",[],"/Users/ashish/Documents/tambola/frontend/src/components/Box.tsx",[],"/Users/ashish/Documents/tambola/frontend/src/components/House.tsx",[],"/Users/ashish/Documents/tambola/frontend/src/components/ResultButtons.tsx",[],"/Users/ashish/Documents/tambola/frontend/src/components/GoneNumbers.tsx",[],"/Users/ashish/Documents/tambola/frontend/src/components/Line.tsx",[],"/Users/ashish/Documents/tambola2/frontend/src/index.tsx",[],"/Users/ashish/Documents/tambola2/frontend/src/components/App.tsx",[],"/Users/ashish/Documents/tambola2/frontend/src/utils/utils.tsx",[],"/Users/ashish/Documents/tambola2/frontend/src/components/EnterName.tsx",["253","254"],"/Users/ashish/Documents/tambola2/frontend/src/components/Config.tsx",["255","256","257","258","259","260","261","262"],"/Users/ashish/Documents/tambola2/frontend/src/components/ConfigTable.tsx",[],"/Users/ashish/Documents/tambola2/frontend/src/components/Player.tsx",["263"],"/Users/ashish/Documents/tambola2/frontend/src/components/Toast.tsx",[],"/Users/ashish/Documents/tambola2/frontend/src/components/Walkthrough.tsx",[],"/Users/ashish/Documents/tambola2/frontend/src/components/PcTicket.tsx",["264"],"/Users/ashish/Documents/tambola2/frontend/src/components/Board.tsx",[],"/Users/ashish/Documents/tambola2/frontend/src/components/Prizes.tsx",[],"/Users/ashish/Documents/tambola2/frontend/src/components/MultipleHostTickets.tsx",["265"],"/Users/ashish/Documents/tambola2/frontend/src/components/Ticket.tsx",[],"/Users/ashish/Documents/tambola2/frontend/src/components/NewNumber.tsx",[],"/Users/ashish/Documents/tambola2/frontend/src/components/Timer.tsx",[],"/Users/ashish/Documents/tambola2/frontend/src/components/Notification.tsx",[],"/Users/ashish/Documents/tambola2/frontend/src/components/WinningButtons.tsx",[],"/Users/ashish/Documents/tambola2/frontend/src/components/Waiting.tsx",[],"/Users/ashish/Documents/tambola2/frontend/src/components/BoardLine.tsx",[],"/Users/ashish/Documents/tambola2/frontend/src/components/HostTicket.tsx",["266","267","268","269","270","271","272","273","274","275","276","277","278"],"/Users/ashish/Documents/tambola2/frontend/src/components/House.tsx",[],"/Users/ashish/Documents/tambola2/frontend/src/components/GoneNumbers.tsx",[],"/Users/ashish/Documents/tambola2/frontend/src/components/ResultButtons.tsx",[],"/Users/ashish/Documents/tambola2/frontend/src/components/Box.tsx",[],"/Users/ashish/Documents/tambola2/frontend/src/components/Line.tsx",[],{"ruleId":"279","replacedBy":"280"},{"ruleId":"281","replacedBy":"282"},{"ruleId":"283","severity":1,"message":"284","line":25,"column":14,"nodeType":"285","messageId":"286","endLine":25,"endColumn":16},{"ruleId":"283","severity":1,"message":"284","line":28,"column":18,"nodeType":"285","messageId":"286","endLine":28,"endColumn":20},{"ruleId":"287","severity":1,"message":"288","line":5,"column":8,"nodeType":"289","messageId":"290","endLine":5,"endColumn":20},{"ruleId":"287","severity":1,"message":"291","line":6,"column":8,"nodeType":"289","messageId":"290","endLine":6,"endColumn":16},{"ruleId":"283","severity":1,"message":"284","line":175,"column":15,"nodeType":"285","messageId":"286","endLine":175,"endColumn":17},{"ruleId":"283","severity":1,"message":"284","line":267,"column":28,"nodeType":"285","messageId":"286","endLine":267,"endColumn":30},{"ruleId":"283","severity":1,"message":"284","line":267,"column":83,"nodeType":"285","messageId":"286","endLine":267,"endColumn":85},{"ruleId":"283","severity":1,"message":"284","line":309,"column":26,"nodeType":"285","messageId":"286","endLine":309,"endColumn":28},{"ruleId":"283","severity":1,"message":"284","line":424,"column":52,"nodeType":"285","messageId":"286","endLine":424,"endColumn":54},{"ruleId":"292","severity":1,"message":"293","line":485,"column":7,"nodeType":"294","endLine":485,"endColumn":24},{"ruleId":"287","severity":1,"message":"295","line":76,"column":9,"nodeType":"289","messageId":"290","endLine":76,"endColumn":14},{"ruleId":"279","replacedBy":"296"},{"ruleId":"281","replacedBy":"297"},{"ruleId":"287","severity":1,"message":"298","line":12,"column":8,"nodeType":"289","messageId":"290","endLine":12,"endColumn":13},{"ruleId":"287","severity":1,"message":"298","line":6,"column":8,"nodeType":"289","messageId":"290","endLine":6,"endColumn":13},{"ruleId":"287","severity":1,"message":"299","line":5,"column":8,"nodeType":"289","messageId":"290","endLine":5,"endColumn":13},{"ruleId":"287","severity":1,"message":"298","line":6,"column":8,"nodeType":"289","messageId":"290","endLine":6,"endColumn":13},{"ruleId":"287","severity":1,"message":"300","line":7,"column":8,"nodeType":"289","messageId":"290","endLine":7,"endColumn":19},{"ruleId":"283","severity":1,"message":"284","line":21,"column":35,"nodeType":"285","messageId":"286","endLine":21,"endColumn":37},{"ruleId":"283","severity":1,"message":"284","line":26,"column":35,"nodeType":"285","messageId":"286","endLine":26,"endColumn":37},{"ruleId":"283","severity":1,"message":"284","line":31,"column":35,"nodeType":"285","messageId":"286","endLine":31,"endColumn":37},{"ruleId":"283","severity":1,"message":"284","line":36,"column":35,"nodeType":"285","messageId":"286","endLine":36,"endColumn":37},{"ruleId":"283","severity":1,"message":"284","line":40,"column":35,"nodeType":"285","messageId":"286","endLine":40,"endColumn":37},{"ruleId":"283","severity":1,"message":"284","line":102,"column":26,"nodeType":"285","messageId":"286","endLine":102,"endColumn":28},{"ruleId":"283","severity":1,"message":"284","line":111,"column":19,"nodeType":"285","messageId":"286","endLine":111,"endColumn":21},{"ruleId":"283","severity":1,"message":"301","line":133,"column":20,"nodeType":"285","messageId":"286","endLine":133,"endColumn":22},{"ruleId":"283","severity":1,"message":"284","line":150,"column":10,"nodeType":"285","messageId":"286","endLine":150,"endColumn":12},{"ruleId":"283","severity":1,"message":"284","line":155,"column":24,"nodeType":"285","messageId":"286","endLine":155,"endColumn":26},{"ruleId":"283","severity":1,"message":"284","line":25,"column":14,"nodeType":"285","messageId":"286","endLine":25,"endColumn":16},{"ruleId":"283","severity":1,"message":"284","line":28,"column":18,"nodeType":"285","messageId":"286","endLine":28,"endColumn":20},{"ruleId":"287","severity":1,"message":"288","line":5,"column":8,"nodeType":"289","messageId":"290","endLine":5,"endColumn":20},{"ruleId":"287","severity":1,"message":"291","line":6,"column":8,"nodeType":"289","messageId":"290","endLine":6,"endColumn":16},{"ruleId":"283","severity":1,"message":"284","line":175,"column":15,"nodeType":"285","messageId":"286","endLine":175,"endColumn":17},{"ruleId":"283","severity":1,"message":"284","line":267,"column":28,"nodeType":"285","messageId":"286","endLine":267,"endColumn":30},{"ruleId":"283","severity":1,"message":"284","line":267,"column":83,"nodeType":"285","messageId":"286","endLine":267,"endColumn":85},{"ruleId":"283","severity":1,"message":"284","line":309,"column":26,"nodeType":"285","messageId":"286","endLine":309,"endColumn":28},{"ruleId":"283","severity":1,"message":"284","line":424,"column":52,"nodeType":"285","messageId":"286","endLine":424,"endColumn":54},{"ruleId":"292","severity":1,"message":"293","line":485,"column":7,"nodeType":"294","endLine":485,"endColumn":24},{"ruleId":"287","severity":1,"message":"295","line":76,"column":9,"nodeType":"289","messageId":"290","endLine":76,"endColumn":14},{"ruleId":"287","severity":1,"message":"298","line":12,"column":8,"nodeType":"289","messageId":"290","endLine":12,"endColumn":13},{"ruleId":"287","severity":1,"message":"298","line":6,"column":8,"nodeType":"289","messageId":"290","endLine":6,"endColumn":13},{"ruleId":"287","severity":1,"message":"299","line":5,"column":8,"nodeType":"289","messageId":"290","endLine":5,"endColumn":13},{"ruleId":"287","severity":1,"message":"298","line":6,"column":8,"nodeType":"289","messageId":"290","endLine":6,"endColumn":13},{"ruleId":"287","severity":1,"message":"300","line":7,"column":8,"nodeType":"289","messageId":"290","endLine":7,"endColumn":19},{"ruleId":"283","severity":1,"message":"284","line":21,"column":35,"nodeType":"285","messageId":"286","endLine":21,"endColumn":37},{"ruleId":"283","severity":1,"message":"284","line":26,"column":35,"nodeType":"285","messageId":"286","endLine":26,"endColumn":37},{"ruleId":"283","severity":1,"message":"284","line":31,"column":35,"nodeType":"285","messageId":"286","endLine":31,"endColumn":37},{"ruleId":"283","severity":1,"message":"284","line":36,"column":35,"nodeType":"285","messageId":"286","endLine":36,"endColumn":37},{"ruleId":"283","severity":1,"message":"284","line":40,"column":35,"nodeType":"285","messageId":"286","endLine":40,"endColumn":37},{"ruleId":"283","severity":1,"message":"284","line":102,"column":26,"nodeType":"285","messageId":"286","endLine":102,"endColumn":28},{"ruleId":"283","severity":1,"message":"284","line":111,"column":19,"nodeType":"285","messageId":"286","endLine":111,"endColumn":21},{"ruleId":"283","severity":1,"message":"301","line":133,"column":20,"nodeType":"285","messageId":"286","endLine":133,"endColumn":22},{"ruleId":"283","severity":1,"message":"284","line":150,"column":10,"nodeType":"285","messageId":"286","endLine":150,"endColumn":12},{"ruleId":"283","severity":1,"message":"284","line":155,"column":24,"nodeType":"285","messageId":"286","endLine":155,"endColumn":26},"no-native-reassign",["302"],"no-negated-in-lhs",["303"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","@typescript-eslint/no-unused-vars","'ReadyPlayers' is defined but never used.","Identifier","unusedVar","'Snackbar' is defined but never used.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","'board' is defined but never used.",["302"],["303"],"'Board' is defined but never used.","'axios' is defined but never used.","'GoneNumbers' is defined but never used.","Expected '!==' and instead saw '!='.","no-global-assign","no-unsafe-negation"]